# üîç M√âTHODOLOGIE AUDIT TOOLS

## √âtat: 19/40 audit√©s ‚ö†Ô∏è

**Tools restants (21)**: astronomy, coingecko, device_location, excel_to_sqlite, ffmpeg_frames, flight_tracker, git, imap, math, news_aggregator, office_to_pdf, ollama_local, open_meteo, pdf2text, pdf_download, reddit_intelligence, script_executor, ssh_admin, universal_doc_scraper, ~~video_transcribe~~, youtube_search

**‚ö†Ô∏è AUDIT INCOMPLET: video_transcribe** (19.5/40)
- Correctifs appliqu√©s mais non test√©s (cache Python serveur)
- REQUIRES: red√©marrage serveur (`./scripts/dev.sh`)
- Score: 7.5/10 (estim√©, pending verification)

---

## WORKSPACE

‚ö†Ô∏è **Auto-sync**: writeFile/deleteFile mettent √† jour le workspace automatiquement (pas de reload)
‚ö†Ô∏è **Pas de double-load**: v√©rifier qu'un fichier n'est pas d√©j√† charg√©
üí° **Limite**: 500 KB total, unload syst√©matiquement √† la fin

---

## PROCESS (10 √©tapes)

### 1. S√âLECTION
`random pick_random` sur la liste des tools restants

### 2. CHARGEMENT
```
load_file: ["src/tools/{tool}.py", "src/tool_specs/{tool}.json", "src/tools/_{tool}/*.py"]
```

### 3. TESTS PR√âLIMINAIRES

**‚ö†Ô∏è OBLIGATOIRE - UN PAR UN (jamais parall√®le)**
**‚ö†Ô∏è PAS DE `/tools?reload=1` (119KB, floods LLM)**

A. Charger JSON spec localement (si pas d√©j√† charg√©)
B. **üî¥ TESTS R√âELS OBLIGATOIRES** (minimum 3 tests baseline):
   - Test 1: Op√©ration la plus simple
   - Test 2: Op√©ration avec params
   - Test 3: V√©rification r√©sultat (si applicable)
C. **üö® SI TESTS IMPOSSIBLES (pas de credentials/acc√®s):**
   - **ABORT AUDIT** imm√©diatement
   - Ne PAS continuer l'audit sans tests
   - Documenter la raison dans proc√©dure
   - Passer au tool suivant
D. Observations: outputs, erreurs, validation, truncation, counts, timeouts

### 4. AUDIT

**JSON Spec**:
- [ ] category, displayName, additionalProperties:false
- [ ] Arrays avec items, enums complets
- [ ] required corrects, defaults explicites
- [ ] Descriptions claires (1 ligne max)

**Code**:
- [ ] Output size: limits + truncation warnings
- [ ] Validation stricte
- [ ] Try-catch global
- [ ] Timeouts coh√©rents
- [ ] Logging (INFO/WARNING/ERROR)
- [ ] Pas side-effects import
- [ ] Fichiers < 7KB

**Notation** (/10):
JSON Spec | Architecture | S√©curit√© | Robustesse | Conformit√© | Performance | Maintenabilit√© | Documentation

### 5. CORRECTIFS

**‚ö†Ô∏è D√âCOUPAGE**: Si fichier > 7KB, d√©couper logiquement

Format commit:
```
fix({tool}): critical audit fixes (X.X‚ÜíY.Y/10)

üî¥ CRITICAL: [bugs tests]
üü° MAJOR: [outputs, validation]
üü¢ IMPROVEMENTS: [truncation, logging]

TECHNICAL: conformit√© XX%‚ÜíYY%
TESTS: X/X non-r√©gression OK
SCORE: X.X‚ÜíY.Y/10
```

### 6. TESTS VALIDATION

**üî¥ OBLIGATOIRE APR√àS CORRECTIFS**

Re-tester TOUS les tests pr√©liminaires + nouveaux cas si n√©cessaire

### 7. TESTS NON-R√âGRESSION

**‚ö†Ô∏è OBLIGATOIRE - UN PAR UN**

A. Identifier toutes fonctionnalit√©s
B. Tester exhaustivement (minimum 5 tests)
C. Tableau synth√®se OBLIGATOIRE
D. Si r√©gression: STOP ‚Üí corriger ‚Üí reprendre √©tape 6
E. Validation finale: tous tests ‚úÖ

**üö® ABORT SI:**
- R√©gression d√©tect√©e apr√®s correctif
- Impossible de tester (pas de credentials)
- Tests √©chouent de mani√®re irr√©m√©diable

### 8. CHANGELOG

Ajouter dans `[Unreleased]`:
```markdown
### {tool} - [DATE] ‚úÖ X.X‚ÜíY.Y/10 ‚≠ê

**Fixed**: [bugs]
**Added**: [features]
**Technical**: conformit√© XX%‚ÜíYY%
**Tests**: X/X OK
**SCORE FINAL: Y.Y/10**
**Known Issues**: [si applicable]
```

### 9. COMMIT + PUSH

**üö® COMMIT SEULEMENT SI:**
- ‚úÖ Tous tests validation OK
- ‚úÖ Tests non-r√©gression OK
- ‚úÖ Pas de r√©gression d√©tect√©e

```
git commit_all -m "fix({tool}): critical audit fixes (X.X‚ÜíY.Y/10) ..."
git push main
```

**üö® EN CAS D'ERREUR APR√àS COMMIT:**
- Rollback si possible
- Sinon: commit correctif imm√©diat
- MAJ changelog avec correction

### 10. UNLOAD + MAJ PROC√âDURE

```
unload_file: ["src/tools/{tool}.py", ...]
```

**MAJ proc√©dure**:
- Incr√©menter compteur (18‚Üí19/40)
- Retirer de liste tools restants
- Commit: `docs(audit): update methodology - {tool} audited (X/40)`

---

## R√àGLES ABSOLUES

1. üö® Appels UN PAR UN (jamais parall√®le)
2. üö® PAS DE `/tools?reload=1` (floods LLM)
3. üö® **TESTS R√âELS OBLIGATOIRES avant audit**
4. üö® **ABORT si tests impossibles** (pas de credentials/acc√®s)
5. üö® **Tests validation OBLIGATOIRES apr√®s correctifs**
6. üö® Tests non-r√©gression OBLIGATOIRES
7. üö® **COMMIT SEULEMENT SI tous tests OK**
8. Charger JSON spec localement avant tests
9. Outputs minimaux (pas metadata success/operation c√¥t√© tool)
10. Truncation warnings si > 50 items
11. CHANGELOG m√†j + rotation si > 10KB
12. Unload toujours √† la fin
13. Proc√©dure m√†j apr√®s chaque audit
14. üö® D√©coupage fichiers si > 7KB
15. üö® CHANGELOG condens√© (essentiel uniquement)
16. üö® Workspace auto-sync
17. üö® **RESTART SERVEUR si cache Python probl√©matique**

---

## COMMANDE REPRISE

```
Audite le prochain tool (random)
```

Workspace permanent: LLM_DEV_GUIDE.md, README.md, CHANGELOG.md, src/tools/README.md, proc√©dure
