# üîç M√âTHODOLOGIE AUDIT TOOLS

## √âtat: 18/40 audit√©s

**Tools restants (22)**: astronomy, coingecko, device_location, discord_webhook, excel_to_sqlite, ffmpeg_frames, flight_tracker, git, imap, math, news_aggregator, office_to_pdf, ollama_local, open_meteo, pdf2text, pdf_download, reddit_intelligence, script_executor, ssh_admin, universal_doc_scraper, video_transcribe, youtube_search

---

## WORKSPACE

‚ö†Ô∏è **Auto-sync**: writeFile/deleteFile mettent √† jour le workspace automatiquement (pas de reload)
‚ö†Ô∏è **Pas de double-load**: v√©rifier qu'un fichier n'est pas d√©j√† charg√©
üí° **Limite**: 500 KB total, unload syst√©matiquement √† la fin

---

## PROCESS (10 √©tapes)

### 1. S√âLECTION
`random pick_random` sur la liste des tools restants

### 2. CHARGEMENT
```
load_file: ["src/tools/{tool}.py", "src/tool_specs/{tool}.json", "src/tools/_{tool}/*.py"]
```

### 3. TESTS PR√âLIMINAIRES

**‚ö†Ô∏è UN PAR UN (jamais parall√®le)**
**‚ö†Ô∏è PAS DE `/tools?reload=1` (119KB, floods LLM)**

A. Charger JSON spec localement (si pas d√©j√† charg√©)
B. 5 tests baseline: simple, params, validation, edge case, complexe
C. Observations: outputs, erreurs, validation, truncation, counts, timeouts

### 4. AUDIT

**JSON Spec**:
- [ ] category, displayName, additionalProperties:false
- [ ] Arrays avec items, enums complets
- [ ] required corrects, defaults explicites
- [ ] Descriptions claires (1 ligne max)

**Code**:
- [ ] Output size: limits + truncation warnings
- [ ] Validation stricte
- [ ] Try-catch global
- [ ] Timeouts coh√©rents
- [ ] Logging (INFO/WARNING/ERROR)
- [ ] Pas side-effects import
- [ ] Fichiers < 7KB

**Notation** (/10):
JSON Spec | Architecture | S√©curit√© | Robustesse | Conformit√© | Performance | Maintenabilit√© | Documentation

### 5. CORRECTIFS

**‚ö†Ô∏è D√âCOUPAGE**: Si fichier > 7KB, d√©couper logiquement

Format commit:
```
fix({tool}): critical audit fixes (X.X‚ÜíY.Y/10)

üî¥ CRITICAL: [bugs tests]
üü° MAJOR: [outputs, validation]
üü¢ IMPROVEMENTS: [truncation, logging]

TECHNICAL: conformit√© XX%‚ÜíYY%
TESTS: X/X non-r√©gression OK
SCORE: X.X‚ÜíY.Y/10
```

### 6. TESTS VALIDATION

Re-tester uniquement ce qui posait probl√®me

### 7. TESTS NON-R√âGRESSION

**‚ö†Ô∏è OBLIGATOIRE - UN PAR UN**

A. Identifier toutes fonctionnalit√©s
B. Tester exhaustivement
C. Tableau synth√®se OBLIGATOIRE
D. Si r√©gression: STOP ‚Üí corriger ‚Üí reprendre
E. Validation finale: tous tests ‚úÖ

### 8. CHANGELOG

Ajouter dans `[Unreleased]`:
```markdown
### {tool} - [DATE] ‚úÖ X.X‚ÜíY.Y/10 ‚≠ê

**Fixed**: [bugs]
**Added**: [features]
**Technical**: conformit√© XX%‚ÜíYY%
**Tests**: X/X OK
**SCORE FINAL: Y.Y/10**
**Known Issues**: [si applicable]
```

### 9. COMMIT + PUSH

```
git commit_all -m "fix({tool}): critical audit fixes (X.X‚ÜíY.Y/10) ..."
git push main
```

### 10. UNLOAD + MAJ PROC√âDURE

```
unload_file: ["src/tools/{tool}.py", ...]
```

**MAJ proc√©dure**:
- Incr√©menter compteur (17‚Üí18/40)
- Retirer de liste tools restants
- Commit: `docs(audit): update methodology - {tool} audited (X/40)`

---

## R√àGLES ABSOLUES

1. üö® Appels UN PAR UN (jamais parall√®le)
2. üö® PAS DE `/tools?reload=1` (floods LLM)
3. Charger JSON spec localement avant tests
4. Tests avant audit (√©tape 3)
5. Outputs minimaux (pas metadata success/operation c√¥t√© tool)
6. Truncation warnings si > 50 items
7. Tests validation apr√®s correctifs
8. üö® Tests non-r√©gression OBLIGATOIRES
9. CHANGELOG m√†j + rotation si > 10KB
10. Unload toujours √† la fin
11. Proc√©dure m√†j apr√®s chaque audit
12. üö® D√©coupage fichiers si > 7KB
13. üö® CHANGELOG condens√© (essentiel uniquement)
14. üö® Workspace auto-sync
15. üö® Tester les correctifs avant commit

---

## COMMANDE REPRISE

```
Audite le prochain tool (random)
```

Workspace permanent: LLM_DEV_GUIDE.md, README.md, CHANGELOG.md, src/tools/README.md, proc√©dure
