# üîç M√âTHODOLOGIE AUDIT TOOLS

## √âtat: 4/40 audit√©s
- discord_bot: 9.6/10 ‚úÖ
- ship_tracker: 9.4/10 ‚úÖ  
- random: cr√©√© ‚úÖ
- chess_com: 8.8/10 ‚úÖ

---

## PROCESS (9 √©tapes)

### 1. S√âLECTION RANDOM
- Utiliser le tool `random`: `pick_random` avec la liste des 36 tools restants
- Simple et rapide

### 2. CHARGEMENT
```
load_file: [
  "src/tools/{tool}.py",
  "src/tool_specs/{tool}.json", 
  "src/tools/_{tool}/*.py"  // TOUS
]
```

### 3. AUDIT

#### A. JSON SPEC (CRITIQUE - LLM)
- [ ] `category` d√©finie
- [ ] `displayName` pr√©sent
- [ ] `additionalProperties: false`
- [ ] Arrays avec `items`
- [ ] Enums complets
- [ ] `description` claire (1 ligne max)
- [ ] `required` corrects
- [ ] Defaults sens√©s
- [ ] Limits min/max

**Questions**:
- LLM comprend CHAQUE param ?
- Descriptions ambigu√´s ?
- Params secrets ?

#### B. CODE
- [ ] Output size: limits + truncation warnings
- [ ] Validation stricte
- [ ] Try-catch global
- [ ] Timeouts
- [ ] Pas side-effects import
- [ ] Logging minimal
- [ ] DRY
- [ ] Modulaire

**Outputs MINIMAUX**:
```python
‚úÖ return [1,2,3]
‚úÖ return "heads"

‚ùå return {"success": true, "operation": "...", ...}
```

#### C. NOTATION
- JSON Spec LLM: /10
- Architecture: /10
- S√©curit√©: /10
- Robustesse: /10
- Conformit√©: /10
- Performance: /10
- Maintenabilit√©: /10
- Documentation: /10

**Score total**: X.X/10

### 4. CORRECTIFS
```
fix({tool}): critical audit fixes (X.X‚ÜíY.Y/10)

üî¥ CRITICAL:
- Bug 1
  ‚Üí BEFORE: ...
  ‚Üí AFTER: ...

üü° MAJOR:
- Am√©lioration 1

üü¢ IMPROVEMENTS:
- Am√©lioration 2

TECHNICAL DETAILS:
- file.py: +XXX bytes
- Conformit√©: XX% ‚Üí YY%

AUDIT SCORE: X.X/10 ‚Üí Y.Y/10 ‚≠ê‚≠ê‚≠ê‚≠ê

Part of: [Unreleased] Tools Audit Campaign
```

### 5. TEST HTTP ‚ö° AUTOMATIQUE

**IMPORTANT**: Tester directement avec `http_client` pour valider les correctifs.

#### A. Reload tools
```bash
GET /tools?reload=1
```

#### B. Tester 2-3 op√©rations repr√©sentatives
Choisir des op√©rations qui couvrent :
- Une op√©ration simple (ex: get_info, list, search)
- Une op√©ration avec param√®tres (ex: search avec query)
- Une op√©ration avec limits (si applicable)

**Template de test**:
```python
# Test 1: Op√©ration simple
POST /execute {
  "tool": "{tool}",
  "params": {
    "operation": "xxx",
    ...
  }
}

# Test 2: Op√©ration avec params
POST /execute {
  "tool": "{tool}",
  "params": {
    "operation": "yyy",
    "query": "test",
    "limit": 5
  }
}

# Test 3: Op√©ration edge case (optionnel)
POST /execute {
  "tool": "{tool}",
  "params": {
    "operation": "zzz",
    ...
  }
}
```

#### C. Validation des r√©sultats
- ‚úÖ Extraire **JUSTE** `body.result` (pas le HTTP complet)
- ‚úÖ V√©rifier structure conforme
- ‚úÖ V√©rifier truncation warnings (si applicable)
- ‚úÖ V√©rifier counts clairs (total vs returned)
- ‚úÖ Pas de metadata superflue

**Format d'affichage**:
```
‚úÖ Test 1 PASSED: {operation} fonctionne
Result: {extraire les 5-10 premi√®res lignes du result}

‚ùå Test 2 FAILED: {operation} erreur
Error: {message d'erreur}
```

#### D. En cas d'erreur
- Analyser l'erreur
- Corriger le code
- Re-tester
- Documenter dans CHANGELOG (section "Fixed during testing")

### 6. CHANGELOG

Ajouter section dans `[Unreleased]`:
```markdown
### {tool} - [DATE] ‚úÖ AUDITED

**Score**: X.X ‚Üí Y.Y/10

#### Fixed
- Bug 1
- Bug 2

#### Improved
- Am√©lioration 1

#### Technical Details
- Files modifi√©s
- Conformit√©: XX% ‚Üí YY%

#### Audit Results
[Tableau scores]

**SCORE FINAL: Y.Y/10** ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê

#### Known Issues (si applicable)
- Issue 1: Description (confirm√© Perplexity si externe)
```

**IMPORTANT**: V√©rifier la taille du CHANGELOG :
- Si > 10KB : **ROTATION OBLIGATOIRE**
  - Cr√©er `changelogs/CHANGELOG_{start}_to_{end}.md`
  - Garder uniquement `[Unreleased]` dans CHANGELOG.md racine
  - Note en t√™te: "Older entries have been archived under changelogs/"

### 7. COMMIT + PUSH
```bash
git commit_all -m "fix({tool}): critical audit fixes (X.X‚ÜíY.Y/10)

üî¥ CRITICAL:
- Fix 1

üü° MAJOR:
- Fix 2

üü¢ IMPROVEMENTS:
- Fix 3

TECHNICAL DETAILS:
- file.py: +XXX bytes
- Conformit√©: XX% ‚Üí YY%

AUDIT SCORE: X.X/10 ‚Üí Y.Y/10 ‚≠ê‚≠ê‚≠ê‚≠ê

KNOWN ISSUES (si applicable):
- Issue 1

Part of: [Unreleased] Tools Audit Campaign

CHANGELOG: [OK / Rotated to changelogs/XXX]"

git push main
```

### 8. UNLOAD WORKSPACE üßπ

**CRITIQUE**: Lib√©rer l'espace workspace pour le prochain audit.

```bash
unload_file: [
  "src/tools/{tool}.py",
  "src/tool_specs/{tool}.json",
  "src/tools/_{tool}/*.py"  // TOUS les fichiers charg√©s
]
```

**V√©rification**:
- Confirmer l'espace lib√©r√© (workspace summary)
- Garder uniquement les fichiers de base (LLM_DEV_GUIDE.md, README.md, CHANGELOG.md, proc√©dure)

### 9. METTRE √Ä JOUR CETTE PROC√âDURE üìù

**OBLIGATOIRE**: Apr√®s chaque audit complet, mettre √† jour cette proc√©dure :

1. **Incr√©menter le compteur**
   - "√âtat: 4/40 audit√©s" ‚Üí "√âtat: 5/40 audit√©s"

2. **Ajouter le tool √† la liste des audit√©s**
   ```
   - discord_bot: 9.6/10 ‚úÖ
   - ship_tracker: 9.4/10 ‚úÖ  
   - random: cr√©√© ‚úÖ
   - chess_com: 8.8/10 ‚úÖ
   - {nouveau_tool}: X.X/10 ‚úÖ  ‚Üê AJOUTER ICI
   ```

3. **Retirer le tool de la liste des restants**
   - Liste "36 tools restants" ‚Üí "35 tools restants"
   - Supprimer `{nouveau_tool}` de la liste alphab√©tique

4. **Commit la proc√©dure**
   ```bash
   git commit -m "docs(audit): update methodology - {tool} audited (X/40)"
   git push main
   ```

**Exemple**:
```
# AVANT
√âtat: 4/40 audit√©s
36 tools restants: academic_research_super, astronomy, ...

# APR√àS (audit de astronomy)
√âtat: 5/40 audit√©s
- astronomy: 8.5/10 ‚úÖ
35 tools restants: academic_research_super, aviation_weather, ...
```

---

## R√àGLES ABSOLUES

1. **JSON**: Auditer lisibilit√© LLM
2. **OUTPUTS**: Minimaux (pas metadata)
3. **TRUNCATION**: Warnings si > 50 items
4. **TESTS**: ‚ö° **AUTOMATIQUES** avec http_client (extraire `body.result` uniquement)
5. **CHANGELOG**: Toujours m√†j + rotation si > 10KB
6. **PAS RELEASE**: Juste push
7. **PERPLEXITY**: Syst√©matique pour les 404 ou bugs suspects d'API externe
8. **UNLOAD**: üßπ **TOUJOURS** unload √† la fin pour lib√©rer workspace
9. **PROC√âDURE**: üìù **TOUJOURS** mettre √† jour cette proc√©dure apr√®s chaque audit

---

## COMMANDE REPRISE

```
Audite le prochain tool (random)
```

**Workspace d√©j√† charg√©**: LLM_DEV_GUIDE.md, README.md, CHANGELOG.md, proc√©dure

**36 tools restants**: academic_research_super, astronomy, aviation_weather, call_llm, coingecko, date, device_location, discord_webhook, email_send, excel_to_sqlite, ffmpeg_frames, flight_tracker, generate_edit_image, git, gitbook, google_maps, http_client, imap, math, news_aggregator, office_to_pdf, ollama_local, open_meteo, pdf2text, pdf_download, pdf_search, reddit_intelligence, script_executor, sqlite_db, ssh_admin, telegram_bot, trivia_api, universal_doc_scraper, velib, video_transcribe, youtube_download, youtube_search

Pr√™t. üöÄ
