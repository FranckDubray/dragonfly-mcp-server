# üîç M√âTHODOLOGIE AUDIT TOOLS

## √âtat: 10/40 audit√©s
sqlite_db: 9.0/10 | discord_bot: 9.6/10 | ship_tracker: 9.4/10 | youtube_download: 9.3/10 | pdf_search: 8.8/10 | chess_com: 8.8/10 | date: 8.5/10 | academic_research_super: 8.1/10 | random: cr√©√©

**30 restants**: astronomy, aviation_weather, call_llm, coingecko, device_location, discord_webhook, email_send, excel_to_sqlite, ffmpeg_frames, flight_tracker, generate_edit_image, git, gitbook, google_maps, http_client, imap, math, news_aggregator, office_to_pdf, ollama_local, open_meteo, pdf2text, pdf_download, reddit_intelligence, script_executor, ssh_admin, telegram_bot, trivia_api, universal_doc_scraper, velib, video_transcribe, youtube_search

---

## PROCESS (10 √©tapes)

### 1. S√âLECTION
`random pick_random` sur la liste des 30 restants

### 2. CHARGEMENT
```
load_file: ["src/tools/{tool}.py", "src/tool_specs/{tool}.json", "src/tools/_{tool}/*.py"]
```

### 3. TESTS PR√âLIMINAIRES

**‚ö†Ô∏è CRITIQUE: Appels UN PAR UN (jamais parall√®le) sinon √©chec syst√®me**

A. **5 tests baseline** (reload tools d'abord):
   1. Op√©ration simple (get_info/list)
   2. Avec params (search + query)
   3. Validation (param invalide)
   4. Edge case (limite d√©pass√©e)
   5. Op√©ration complexe

B. **Observations**:
   - Outputs propres/verbeux ?
   - Erreurs claires ?
   - Validation stricte ?
   - Truncation warnings ?
   - Counts explicites (total vs returned) ?
   - Timeouts OK ?

### 4. AUDIT

**JSON Spec**:
- [ ] category, displayName, additionalProperties:false
- [ ] Arrays avec items, enums complets
- [ ] required corrects, defaults explicites
- [ ] Descriptions claires (1 ligne max)
- [ ] Coh√©rence JSON ‚Üî tests

**Code**:
- [ ] Output size: limits + truncation warnings
- [ ] Validation stricte
- [ ] Try-catch global
- [ ] Timeouts coh√©rents
- [ ] Logging minimal
- [ ] Pas side-effects import

**Notation** (score /10 par crit√®re):
JSON Spec LLM | Architecture | S√©curit√© | Robustesse | Conformit√© | Performance | Maintenabilit√© | Documentation

**P√©nalit√©s**:
- Validation faible ‚Üí Robustesse -2
- Outputs verbeux ‚Üí Conformit√© -2
- Pas truncation warning ‚Üí Performance -1
- Erreurs floues ‚Üí Documentation -1

### 5. CORRECTIFS

Format commit:
```
fix({tool}): critical audit fixes (X.X‚ÜíY.Y/10)

üî¥ CRITICAL: [bugs tests 1-5]
üü° MAJOR: [outputs, validation]
üü¢ IMPROVEMENTS: [truncation, logging]

TECHNICAL: files modifi√©s, conformit√© XX%‚ÜíYY%
AUDIT SCORE: X.X‚ÜíY.Y/10
```

### 6. TESTS VALIDATION

**‚ö†Ô∏è UN PAR UN**

Reload tools ‚Üí Re-tester uniquement ce qui posait probl√®me:
- Bugs d√©tect√©s ‚Üí v√©rifier correction
- Outputs verbeux ‚Üí v√©rifier simplification
- Validation faible ‚Üí v√©rifier renforcement

### 7. TESTS NON-R√âGRESSION

**‚ö†Ô∏è OBLIGATOIRE - UN PAR UN**

A. **Identifier** toutes fonctionnalit√©s:
   - Toutes op√©rations
   - Tous providers/sources
   - Tous filtres (dates, limites)
   - Multi-sources, edge cases

B. **Tester exhaustivement**:
   - Chaque source individuellement
   - Combinaisons multi-sources
   - Filtres temporels
   - Overrides limites
   - Nouveaux param√®tres ajout√©s

C. **Tableau synth√®se OBLIGATOIRE**:
```
| Test | Fonctionnalit√© | Avant | Apr√®s | Statut |
|------|----------------|-------|-------|--------|
| ‚úÖ 1 | Source A | ‚úÖ | ‚úÖ | OK |
| ‚úÖ 2 | Source B | ‚úÖ | ‚úÖ | OK |
| ‚úÖ 3 | Multi-sources | ‚úÖ | ‚úÖ | OK |
| ‚ùå 4 | Feature X | ‚úÖ | ‚ùå | CASS√â |
```

D. **Si r√©gression**: STOP ‚Üí analyser ‚Üí corriger ‚Üí re-tester ‚Üí reprendre 7A

E. **Validation finale**: Tous tests ‚úÖ ‚Üí commit

### 8. CHANGELOG

Ajouter dans `[Unreleased]`:
```markdown
### {tool} - [DATE] ‚úÖ AUDITED (X.X‚ÜíY.Y/10)

**Fixed**: [bugs tests]
**Improved**: [outputs, validation]
**Technical**: files modifi√©s, conformit√© XX%‚ÜíYY%
**Tests**: Pr√©liminaires, Validation, Non-r√©gression (X/X OK)
**Audit Results**: [tableau scores]
**SCORE FINAL: Y.Y/10** ‚≠ê‚≠ê‚≠ê‚≠ê
**Known Issues**: [si applicable]
```

**Si CHANGELOG > 10KB**: rotation obligatoire ‚Üí `changelogs/CHANGELOG_{start}_to_{end}.md`

### 9. COMMIT + PUSH

```bash
git commit_all -m "fix({tool}): critical audit fixes (X.X‚ÜíY.Y/10)
[message d√©taill√© √©tape 5]
‚úÖ Non-r√©gression: X/X tests OK"

git push main
```

### 10. UNLOAD + MAJ PROC√âDURE

```bash
unload_file: ["src/tools/{tool}.py", "src/tool_specs/{tool}.json", "src/tools/_{tool}/*.py"]
```

**Mettre √† jour cette proc√©dure**:
- Incr√©menter compteur (10‚Üí11/40)
- Ajouter tool √† liste audit√©s (ordre d√©croissant score)
- Retirer de liste restants
- Commit: `docs(audit): update methodology - {tool} audited (X/40)`

---

## R√àGLES ABSOLUES

1. üö® **Appels UN PAR UN** (jamais parall√®le http_client)
2. **Tests avant audit** (√©tape 3)
3. **Outputs minimaux** (pas metadata success/operation)
4. **Truncation warnings** si > 50 items
5. **Tests validation** apr√®s correctifs
6. üö® **Tests non-r√©gression OBLIGATOIRES**
7. **CHANGELOG** m√†j + rotation si > 10KB
8. **Perplexity** pour 404/bugs API externes
9. **Unload** toujours √† la fin
10. **Proc√©dure** m√†j apr√®s chaque audit

---

## COMMANDE REPRISE

```
Audite le prochain tool (random)
```

Workspace: LLM_DEV_GUIDE.md, README.md, CHANGELOG.md, proc√©dure
