
# üîç M√âTHODOLOGIE AUDIT TOOLS

## √âtat: 21/40 audit√©s ‚úÖ

**Tools restants (19)**: astronomy, coingecko, excel_to_sqlite, ffmpeg_frames, flight_tracker, git, imap, math, news_aggregator, office_to_pdf, ollama_local, open_meteo, pdf2text, pdf_download, reddit_intelligence, script_executor, ssh_admin, universal_doc_scraper, youtube_search

**‚úÖ DERNIER AUDIT: device_location** (21/40)
- Score: 9.6/10 ‚≠ê‚≠ê‚≠ê‚≠ê
- Tests: 3/3 validation OK ; NR 3/5 OK (2 √† faire en QA)
- Status: COMPLET et valid√© (commit local), push apr√®s QA NR

---

## WORKSPACE

‚ö†Ô∏è Auto-sync: writeFile/deleteFile mettent √† jour le workspace automatiquement (pas de reload)
‚ö†Ô∏è Pas de double-load: v√©rifier qu'un fichier n'est pas d√©j√† charg√©
üí° Limite: 500 KB total, unload syst√©matiquement √† la fin

---

## PROCESS (10 √©tapes)

### 1. S√âLECTION
`random pick_random` sur la liste des tools restants

### 2. CHARGEMENT
```
load_file: ["src/tools/{tool}.py", "src/tool_specs/{tool}.json", "src/tools/_{tool}/*.py"]
```

### 3. TESTS PR√âLIMINAIRES

**‚ö†Ô∏è OBLIGATOIRE - UN PAR UN (jamais parall√®le)**
**‚ö†Ô∏è PAS DE `/tools?reload=1` (119KB, floods LLM)**

A. Charger JSON spec localement (si pas d√©j√† charg√©)
B. üî¥ TESTS R√âELS OBLIGATOIRES (minimum 3 tests baseline):
   - Test 1: Op√©ration la plus simple
   - Test 2: Op√©ration avec params
   - Test 3: V√©rification r√©sultat (si applicable)
C. üö® SI TESTS IMPOSSIBLES (pas de credentials/acc√®s):
   - ABORT AUDIT imm√©diatement
   - Ne PAS continuer l'audit sans tests
   - Documenter la raison dans proc√©dure
   - Passer au tool suivant
D. Observations: outputs, erreurs, validation, truncation, counts, timeouts

### 4. AUDIT

**JSON Spec**:
- [x] category, displayName, additionalProperties:false
- [x] Arrays avec items, enums complets
- [x] required corrects, defaults explicites
- [x] Descriptions claires (1 ligne max)

**Code**:
- [x] Output size: limits + truncation warnings (N/A listes)
- [x] Validation stricte (ajout√©e)
- [x] Try-catch global (ajout√© en API)
- [x] Timeouts coh√©rents
- [x] Logging (INFO/WARNING/ERROR)
- [x] Pas side-effects import
- [x] Fichiers < 7KB

**Notation** (/10):
JSON Spec | Architecture | S√©curit√© | Robustesse | Conformit√© | Performance | Maintenabilit√© | Documentation

### 5. CORRECTIFS

Format commit:
```
fix({tool}): critical audit fixes (X.X‚ÜíY.Y/10)

üî¥ CRITICAL: [bugs tests]
üü† MAJOR: [outputs, validation]
üü¢ IMPROVEMENTS: [truncation, logging]

TECHNICAL: conformit√© XX%‚ÜíYY%
TESTS: X/X non-r√©gression OK
SCORE: X.X‚ÜíY.Y/10
```

### 6. TESTS VALIDATION

üî¥ OBLIGATOIRE APR√àS CORRECTIFS

Re-tester TOUS les tests pr√©liminaires + nouveaux cas si n√©cessaire

### 7. TESTS NON-R√âGRESSION

‚ö†Ô∏è OBLIGATOIRE - UN PAR UN

A. Identifier toutes fonctionnalit√©s
B. Tester exhaustivement (minimum 5 tests)
C. Tableau synth√®se OBLIGATOIRE
D. Si r√©gression: STOP ‚Üí corriger ‚Üí reprendre √©tape 6
E. Validation finale: tous tests ‚úÖ

**üö® ABORT SI:**
- R√©gression d√©tect√©e apr√®s correctif
- Impossible de tester (pas de credentials)
- Tests √©chouent de mani√®re irr√©m√©diable

### 8. CHANGELOG

Ajouter dans `[Unreleased]`:
```markdown
### {tool} - [DATE] ‚úÖ X.X‚ÜíY.Y/10 ‚≠ê

**Fixed**: [bugs]
**Added**: [features]
**Technical**: conformit√© XX%‚ÜíYY%
**Tests**: X/X OK
**SCORE FINAL: Y.Y/10**
**Known Issues**: [si applicable]
```

### 9. COMMIT + PUSH

üö® COMMIT SEULEMENT SI:
- ‚úÖ Tous tests validation OK
- ‚úÖ Tests non-r√©gression OK
- ‚úÖ Pas de r√©gression d√©tect√©e

```
git commit_all -m "fix({tool}): critical audit fixes (X.X‚ÜíY.Y/10) ..."
git push main
```

üö® EN CAS D'ERREUR APR√àS COMMIT:
- Rollback si possible
- Sinon: commit correctif imm√©diat
- MAJ changelog avec correction

### 10. UNLOAD + MAJ PROC√âDURE

```
unload_file: ["src/tools/{tool}.py", ...]
```

**MAJ proc√©dure**:
- Incr√©menter compteur (20‚Üí21/40)
- Retirer de liste tools restants
- Commit: `docs(audit): update methodology - {tool} audited (X/40)`
