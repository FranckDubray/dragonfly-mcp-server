
{
  "type": "function",
  "function": {
    "name": "py_orchestrator",
    "displayName": "Python Orchestrator",
    "category": "intelligence",
    "tags": ["process", "python", "debug"],
    "description": "Run Python-defined workflows (Process/SubGraphs/Steps). Start/stop/status/debug; graph extraction (process/subgraph/current_subgraph); validate worker (AST+rules); list transforms; read/update worker config (directory-based: config/config.json + config/prompts/*.md). Includes a passive observation mode (observe) that tails DB steps and emits events (no interaction).",
    "parameters": {
      "type": "object",
      "properties": {
        "operation": {
          "type": "string",
          "enum": [
            "start",
            "stop",
            "status",
            "debug",
            "observe",
            "list",
            "graph",
            "validate",
            "transforms",
            "config"
          ],
          "description": "Control operation"
        },
        "worker_name": {
          "type": "string",
          "description": "Logical worker name (used for DB)"
        },
        "worker_file": {
          "type": "string",
          "description": "Entry file under workers/<name>/process.py"
        },
        "hot_reload": {
          "type": "boolean",
          "default": true,
          "description": "Reload worker modules when files change"
        },
        "stop": {
          "type": "object",
          "description": "Stop options",
          "properties": {
            "mode": {
              "type": "string",
              "enum": ["soft", "term", "kill"],
              "default": "soft"
            }
          },
          "additionalProperties": false
        },
        "debug": {
          "type": "object",
          "description": "Interactive debugging (active). Use to enable step mode, step/continue/run_until, manage breakpoints, or request a debug-oriented streaming (action='stream'). NOTE: action='stream' advances the workflow (step-by-step) and is different from 'observe' (read-only).",
          "properties": {
            "action": {
              "type": "string",
              "enum": [
                "enable",
                "enable_now",
                "step",
                "continue",
                "run_until",
                "break_add",
                "break_remove",
                "break_clear",
                "break_list",
                "inspect",
                "disable",
                "stream"
              ]
            },
            "pause_at_start": { "type": "boolean" },
            "enable_on_start": { "type": "boolean" },
            "timeout_sec": {
              "type": "number",
              "description": "Debug ACK timeout when action moves (step/continue/run_until)."
            },
            "target": {
              "type": "object",
              "properties": {
                "node": { "type": "string" },
                "when": { "type": "string" }
              },
              "additionalProperties": false
            },
            "breakpoint": {
              "type": "object",
              "properties": {
                "node": { "type": "string" },
                "when": { "type": "string" }
              },
              "additionalProperties": false
            },
            "max_events": { "type": "integer", "minimum": 0 }
          },
          "additionalProperties": false
        },
        "observe": {
          "type": "object",
          "description": "Passive observation (read-only). Returns a single JSON response with the events captured during the window (tail of DB job_steps), without enabling debug nor issuing step/continue. Each event maps to a step INSERT (status='running') or an UPDATE (runningâ†’succeeded/failed). Event schema: { chunk_type:'step'|'error', node_executed, cycle_id, duration_ms, updated?:boolean, io:{ in:callObj, out_preview:string }, phase, heartbeat }. Status is 'ok' or 'timeout'. Does not alter the worker state.",
          "properties": {
            "timeout_sec": { "type": "number", "description": "Seconds before the server returns; <=0 or omitted means infinite (client-driven)." },
            "max_events": { "type": "integer", "minimum": 0 }
          },
          "additionalProperties": false
        },
        "include_metrics": {
          "type": "boolean",
          "description": "Include metrics for the current run in status response"
        },
        "metrics": {
          "type": "object",
          "properties": {
            "include": { "type": "boolean" },
            "window": {
              "type": "string",
              "description": "Metrics window (e.g., '5m', '15m', '1h')"
            }
          },
          "additionalProperties": false
        },
        "graph": {
          "type": "object",
          "description": "Extract process/subgraph graph (semantic graph for rendering). No server-side highlight/styling.",
          "properties": {
            "kind": {
              "type": "string",
              "enum": ["process", "subgraph", "current_subgraph"],
              "default": "process"
            },
            "subgraphs": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Subgraph names when kind=subgraph"
            },
            "recursive": {
              "type": "boolean",
              "default": true,
              "description": "Include referenced subgraphs recursively (when relevant)"
            },
            "include": {
              "type": "object",
              "properties": {
                "shapes": {
                  "type": "boolean",
                  "default": true,
                  "description": "Add suggested shapes (diamond for cond, rect for steps)"
                },
                "emojis": {
                  "type": "boolean",
                  "default": true,
                  "description": "Add emojis for categories (tools) and gear for transforms"
                },
                "labels": {
                  "type": "boolean",
                  "default": true,
                  "description": "Include edge labels (when)"
                }
              },
              "additionalProperties": false
            },
            "include_position": {
              "type": "boolean",
              "description": "Include current/next nodes and subgraphs (position) in the response"
            },
            "render": {
              "type": "object",
              "properties": {
                "mermaid": {
                  "type": "boolean",
                  "description": "Return plain Mermaid representation (no server-side highlight)."
                },
                "hide_start": {
                  "type": "boolean",
                  "description": "Hide START node in Mermaid"
                },
                "hide_end": {
                  "type": "boolean",
                  "description": "Hide END node in Mermaid"
                },
                "overview_subgraphs": {
                  "type": "boolean",
                  "description": "Render an overview graph with one node per subgraph and edges from exits mapping."
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "validate": {
          "type": "object",
          "description": "Validate worker code (AST) and enforce readability rules.",
          "properties": {
            "limit_steps": {
              "type": "integer",
              "minimum": 1,
              "maximum": 200,
              "default": 20,
              "description": "Maximum steps allowed per subgraph (readability)."
            }
          },
          "additionalProperties": false
        },
        "limit": {
          "type": "integer",
          "description": "Optional limit for transforms listing (operation=transforms)",
          "minimum": 1,
          "maximum": 1000
        },
        "set": {
          "type": "object",
          "description": "Config writer (operation=config). Supports nested updates via dot/bracket path and file writes in config/.",
          "properties": {
            "key": {
              "type": "string",
              "description": "Shallow key at metadata root (back-compat)."
            },
            "key_path": {
              "type": "string",
              "description": "Nested path with dot/bracket syntax. Examples: prompts.collect_sonar, primary_site_caps[\"https://x.ai/blog\"], features[0].limits[2]"
            },
            "value": {
              "description": "New value (any JSON-compatible type)"
            },
            "storage": {
              "type": "string",
              "enum": ["file", "inline"],
              "description": "file: persist under workers/<name>/config (prompts/*.md auto-routed or config.json deep-merge). inline: KV only."
            },
            "file": {
              "type": "string",
              "description": "Direct file write under workers/<name>/config (e.g., prompts/x.md, vars/y.json)."
            },
            "create": {
              "type": "boolean",
              "description": "When set.file is used, create the file if it does not exist (default true)."
            }
          },
          "additionalProperties": false
        }
      },
      "required": ["operation"],
      "additionalProperties": false
    }
  }
}
