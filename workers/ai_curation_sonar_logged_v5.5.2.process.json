{
  "version": "1.0",
  "process_version": "5.5.2-json-stringify-fixed",
  "metadata": {
    "description": "AI/LLM Curation - gpt-4o-mini + Sonar + JSON stringify fix + français renforcé",
    "author": "orchestrator-production",
    "changelog": "v5.5.2: Ajout json_stringify avant inserts DB, prompt français renforcé, schema DB compatible"
  },
  "worker_ctx": {
    "timezone": "UTC",
    "llm_model": "gpt-4o-mini",
    "sonar_model": "sonar",
    "llm_temperature": 0.3,
    "quality_threshold": 7,
    "max_retries": 3
  },
  "graph": {
    "nodes": [
      {"name": "START", "type": "start"},
      {
        "name": "get_date_now",
        "type": "io",
        "handler": "http_tool",
        "inputs": {"tool": "date", "operation": "now", "tz": "UTC"},
        "outputs": {"result": "cycle.dates.now"},
        "timeout_sec": 10
      },
      {
        "name": "get_date_from",
        "type": "io",
        "handler": "http_tool",
        "inputs": {"tool": "date", "operation": "add", "date": "${cycle.dates.now}", "days": -3},
        "outputs": {"result": "cycle.dates.from"},
        "timeout_sec": 10
      },
      {
        "name": "fetch_news",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "news_aggregator",
          "operation": "search_news",
          "query": "AI OR LLM OR GPT OR \"large language model\" OR \"artificial intelligence\"",
          "providers": ["nyt", "guardian"],
          "from_date": "${cycle.dates.from}",
          "to_date": "${cycle.dates.now}",
          "limit": 8
        },
        "outputs": {"articles": "cycle.sources.news"},
        "timeout_sec": 30,
        "retry": {"max": 2, "delay_sec": 5}
      },
      {
        "name": "fetch_reddit",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "reddit_intelligence",
          "operation": "multi_search",
          "subreddits": ["MachineLearning", "LocalLLaMA", "OpenAI"],
          "query": "AI OR LLM OR GPT",
          "limit_per_sub": 3,
          "time_filter": "week"
        },
        "outputs": {"results": "cycle.sources.reddit"},
        "timeout_sec": 30,
        "retry": {"max": 2, "delay_sec": 5}
      },
      {
        "name": "fetch_arxiv",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "academic_research_super",
          "operation": "search_papers",
          "query": "LLM OR GPT OR transformer OR \"large language model\"",
          "sources": ["arxiv"],
          "max_results": 8,
          "include_abstracts": true,
          "max_abstract_chars": 500
        },
        "outputs": {"results": "cycle.sources.arxiv"},
        "timeout_sec": 30,
        "retry": {"max": 2, "delay_sec": 5}
      },
      {
        "name": "fetch_papers_with_code",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "universal_doc_scraper",
          "operation": "extract_page",
          "url": "https://paperswithcode.com/latest"
        },
        "outputs": {"content": "cycle.sources.pwc_raw"},
        "timeout_sec": 30,
        "retry": {"max": 2, "delay_sec": 5}
      },
      {
        "name": "fetch_sonar",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "call_llm",
          "operation": "call",
          "model": "${worker.sonar_model}",
          "timeout": 120,
          "messages": [
            {
              "role": "user",
              "content": "Tu es Perplexity Sonar avec accès web temps réel.\n\nTÂCHE : Trouve les développements IA/LLM les plus importants des 3 derniers jours (depuis ${cycle.dates.from}).\n\nEXIGENCES DIVERSITÉ :\n- Mix sources : papers académiques, articles news, repos GitHub, discussions Twitter/X, blogs techniques\n- Éviter doublons : si même news sur plusieurs sites, prendre la source la plus autoritaire\n- Priorité : Breakthroughs > Lancements produits > Recherche > Commentaires\n\nCRITÈRES QUALITÉ :\n- Développements IA/LLM core (pas applications tangentielles)\n- Impact ou nouveauté significatif\n- Sources vérifiables (avec URLs)\n\nFocus sur :\n- Nouveaux papers ou preprints\n- Annonces produits majeures\n- Projets GitHub significatifs\n- Breaking news industrie\n- Breakthroughs techniques\n\nMaximise la diversité des sources. Retourne UNIQUEMENT un array JSON : [{\"source\": \"web|twitter|github|arxiv|blog|news\", \"title\": \"...\", \"url\": \"...\", \"summary\": \"Description brève\"}]\n\nSois SÉLECTIF. Vise 8-10 items haute qualité."
            }
          ],
          "temperature": 0.3,
          "max_tokens": 2000
        },
        "outputs": {"content": "cycle.sources.sonar_raw"},
        "timeout_sec": 120,
        "retry": {"max": 2, "delay_sec": 10}
      },
      {
        "name": "normalize_sonar_source",
        "type": "transform",
        "handler": "normalize_llm_output",
        "inputs": {"content": "${cycle.sources.sonar_raw}", "expected_format": "json", "fallback_value": []},
        "outputs": {"parsed": "cycle.sources.sonar"}
      }
    ,
      {"name": "SCORING_LOOP", "type": "transform", "handler": "set_value", "inputs": {"value": "scoring"}, "outputs": {"result": "cycle.meta.phase"}},
      {
        "name": "get_scoring_timestamp",
        "type": "io",
        "handler": "http_tool",
        "inputs": {"tool": "date", "operation": "now", "tz": "UTC"},
        "outputs": {"result": "cycle.meta.scoring_started_at"},
        "timeout_sec": 5
      },
      {
        "name": "llm_gpt_score",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "call_llm",
          "operation": "call",
          "model": "${worker.llm_model}",
          "timeout": 180,
          "messages": [
            {
              "role": "system",
              "content": "You are an expert AI/LLM curator with deep technical knowledge.\n\nSCORING CRITERIA (1-10):\n1. Relevance (40%): Core AI/LLM advancement (not tangential applications like \"AI for marketing\")\n2. Novelty (30%): Breaking news > recent research > older developments; unique insights preferred\n3. Source Quality (20%): Peer-reviewed papers/arXiv > GitHub/Code > News/Blogs > Reddit/Social\n4. Diversity (10%): Prefer varied sources; penalize if 3+ items from same domain\n\nOUTPUT REQUIREMENTS:\n- EXACTLY 10 items, ranked by score (highest first)\n- Mix sources: aim for 2-3 papers, 2-3 news, 2-3 community (reddit/twitter), 1-2 code/practical\n- Avoid duplicates: if same topic appears multiple times, pick the best source\n- JSON format: [{\"source\": \"arxiv|news|reddit|github|paperswithcode|sonar\", \"title\": \"...\", \"url\": \"...\", \"score\": 9.5, \"reason\": \"Brief: why important + source quality note\"}]\n\nBe CRITICAL:\n- Score 9-10: Major breakthrough (e.g., new SOTA, paradigm shift)\n- Score 7-8: Significant development (e.g., important research, product launch)\n- Score <7: Routine/incremental (filter these out)\n\nReturn ONLY the JSON array, no other text."
            },
            {
              "role": "user",
              "content": "Score and rank ALL these items from FIVE sources. Return EXACTLY top 10 as JSON array.\n\n=== NEWS (${cycle.dates.from} to ${cycle.dates.now}) ===\n${cycle.sources.news}\n\n=== REDDIT DISCUSSIONS ===\n${cycle.sources.reddit}\n\n=== ARXIV PAPERS ===\n${cycle.sources.arxiv}\n\n=== PAPERS WITH CODE (extract paper titles, authors, GitHub stars/trends) ===\n${cycle.sources.pwc_raw}\n\n=== SONAR REAL-TIME SEARCH ===\n${cycle.sources.sonar}\n\nApply scoring criteria strictly. Maximize diversity across ALL 5 sources. Return ONLY JSON."
            }
          ],
          "temperature": 0.3,
          "max_tokens": 2500
        },
        "outputs": {"content": "cycle.scoring.gpt_raw"},
        "timeout_sec": 180,
        "retry": {"max": 2, "delay_sec": 10}
      },
      {
        "name": "normalize_gpt_score",
        "type": "transform",
        "handler": "normalize_llm_output",
        "inputs": {"content": "${cycle.scoring.gpt_raw}", "expected_format": "json", "fallback_value": []},
        "outputs": {"parsed": "cycle.scoring.top10", "success": "cycle.scoring.gpt_ok"}
      },
      {"name": "check_parse", "type": "decision", "decision": {"kind": "truthy", "input": "${cycle.scoring.gpt_ok}"}},
      {
        "name": "get_validation_timestamp",
        "type": "io",
        "handler": "http_tool",
        "inputs": {"tool": "date", "operation": "now", "tz": "UTC"},
        "outputs": {"result": "cycle.meta.validation_started_at"},
        "timeout_sec": 5
      },
      {
        "name": "llm_sonar_validate",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "call_llm",
          "operation": "call",
          "model": "${worker.sonar_model}",
          "timeout": 90,
          "messages": [
            {
              "role": "user",
              "content": "Tu es un validateur CRITIQUE de qualité pour la curation IA/LLM.\n\nCRITÈRES D'ÉVALUATION (note 1-10) :\n\n1. PERTINENCE (40%) : Développements IA/LLM core ?\n   - Pénaliser applications tangentielles (\"IA pour X\" sauf breakthrough)\n   - Récompenser recherche fondamentale, améliorations modèles, infrastructure\n\n2. NOUVEAUTÉ (30%) : Récent et groundbreaking ?\n   - Pénaliser vieilles news ou updates incrémentales\n   - Récompenser breaking developments des 3 derniers jours\n\n3. DIVERSITÉ SOURCES (20%) : Mix de sources ?\n   - Idéal : 2-3 papers, 2-3 news, 2-3 community, 1-2 code\n   - Pénaliser : 4+ items même type source (ex: que des news)\n   - Vérifier variété domaines dans URLs\n\n4. AUTORITÉ (10%) : Qualité sources ?\n   - Haute : Peer-reviewed, arXiv, releases officielles\n   - Moyenne : Outlets news majeurs, blogs établis\n   - Basse : Opinions Reddit, claims non vérifiées\n\nGUIDE SCORING :\n- 9-10 : Curation exceptionnelle, breakthroughs majeurs, diversité parfaite\n- 7-8 : Bonne qualité, problèmes mineurs (légère redondance ou 1-2 items faibles)\n- 5-6 : Médiocre (trop de news, faible nouveauté, mauvaise diversité)\n- <5 : Pauvre (majoritairement irrelevant ou vieux contenu)\n\nSois DUR. La plupart des curations sont 6-8. Seul un travail exceptionnel obtient 9+.\n\n=== TOP 10 CURÉ (de 5 sources : News, Reddit, arXiv, Papers With Code, Sonar) ===\n${cycle.scoring.top10}\n\nAnalyse :\n- Qualité globale et pertinence\n- Nouveauté vs news recyclées\n- Diversité sources (compter par type)\n- Développements IA/LLM majeurs manquants ?\n- Autorité des sources\n\nSois exigeant. Note 1-10 et explique ton raisonnement. Retourne UNIQUEMENT du JSON : {\"score\": 7.5, \"feedback\": \"Critique détaillée : forces, faiblesses, évaluation diversité, ce qui manque\"}"
            }
          ],
          "temperature": 0.2,
          "max_tokens": 800
        },
        "outputs": {"content": "cycle.validation.sonar_raw"},
        "timeout_sec": 90,
        "retry": {"max": 2, "delay_sec": 10}
      },
      {
        "name": "normalize_validation",
        "type": "transform",
        "handler": "normalize_llm_output",
        "inputs": {"content": "${cycle.validation.sonar_raw}", "expected_format": "json", "fallback_value": {"score": 0, "feedback": "Parse failed"}},
        "outputs": {"parsed": "cycle.validation.sonar_result"}
      },
      {
        "name": "extract_score",
        "type": "transform",
        "handler": "extract_field",
        "inputs": {"data": "${cycle.validation.sonar_result}", "path": "score", "default": 0},
        "outputs": {"value": "cycle.validation.sonar_score"}
      },
      {
        "name": "extract_feedback",
        "type": "transform",
        "handler": "extract_field",
        "inputs": {"data": "${cycle.validation.sonar_result}", "path": "feedback", "default": "No feedback"},
        "outputs": {"value": "cycle.validation.sonar_feedback"}
      },
      {
        "name": "get_validation_end_timestamp",
        "type": "io",
        "handler": "http_tool",
        "inputs": {"tool": "date", "operation": "now", "tz": "UTC"},
        "outputs": {"result": "cycle.meta.validation_ended_at"},
        "timeout_sec": 5
      },
      {
        "name": "stringify_top10_for_log",
        "type": "transform",
        "handler": "json_stringify",
        "inputs": {"value": "${cycle.scoring.top10}"},
        "outputs": {"json_string": "cycle.scoring.top10_json_str"}
      },
      {
        "name": "log_validation_to_db",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "sqlite_db",
          "operation": "execute",
          "db": "ai_curation_reports.db",
          "query": "CREATE TABLE IF NOT EXISTS validation_logs (id INTEGER PRIMARY KEY AUTOINCREMENT, timestamp TEXT NOT NULL, attempt INTEGER, score REAL, feedback TEXT, top10_json TEXT)",
          "params": []
        },
        "outputs": {"success": "cycle.meta.log_table_ready"},
        "timeout_sec": 10
      },
      {
        "name": "insert_validation_log",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "sqlite_db",
          "operation": "execute",
          "db": "ai_curation_reports.db",
          "query": "INSERT INTO validation_logs (timestamp, attempt, score, feedback, top10_json) VALUES (?, ?, ?, ?, ?)",
          "params": ["${cycle.meta.validation_ended_at}", "${cycle.meta.retry_count}", "${cycle.validation.sonar_score}", "${cycle.validation.sonar_feedback}", "${cycle.scoring.top10_json_str}"]
        },
        "outputs": {"success": "cycle.meta.log_inserted"},
        "timeout_sec": 10
      },
      {
        "name": "log_sonar_validation",
        "type": "transform",
        "handler": "format_template",
        "inputs": {
          "template": "VALIDATION SONAR [{timestamp}] (Tentative {attempt}): Score {score}/10\n{feedback}",
          "timestamp": "${cycle.meta.validation_ended_at}",
          "attempt": "${cycle.meta.retry_count}",
          "score": "${cycle.validation.sonar_score}",
          "feedback": "${cycle.validation.sonar_feedback}"
        },
        "outputs": {"text": "cycle.validation.log_message"}
      }
    ,
      {"name": "check_quality", "type": "decision", "decision": {"kind": "compare", "input": "${cycle.validation.sonar_score}", "operator": ">=", "value": 7}},
      {"name": "check_retry", "type": "decision", "decision": {"kind": "compare", "input": "${cycle.meta.retry_count}", "operator": "<", "value": 3}},
      {
        "name": "increment",
        "type": "transform",
        "handler": "increment",
        "inputs": {"value": "${cycle.meta.retry_count}"},
        "outputs": {"result": "cycle.meta.retry_count"}
      },
      {
        "name": "llm_format",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "call_llm",
          "operation": "call",
          "model": "${worker.llm_model}",
          "timeout": 120,
          "messages": [
            {
              "role": "system",
              "content": "IMPÉRATIF : Réponds UNIQUEMENT en français. Tu es un rédacteur professionnel de rapports de curation IA/LLM.\n\nFORMAT STRICT DU RAPPORT:\n\n# 🤖 Top 10 IA/LLM — [Période]\n\n**Score de qualité:** X/10 | **Tentatives:** N | **Date:** [timestamp]\n\n---\n\n## 📊 Top 10 Sélection (5 sources: News, Reddit, arXiv, Papers With Code, Sonar)\n\n**1. [Titre en français]** — Note: X.X/10  \n*Résumé en 2-3 phrases expliquant pourquoi c'est important et l'impact.*  \n🔗 Source: [URL]\n\n**2. [Titre en français]** — Note: X.X/10  \n*Résumé...*  \n🔗 Source: [URL]\n\n[...répéter pour les 10 items]\n\n---\n\n## ✅ Évaluation Qualité\n\n[Feedback Sonar]\n\n**Score final:** X/10  \n**Nombre de tentatives:** N  \n**Validé le:** [timestamp]\n\n---\n\n## 🔍 Tendances clés\n\n*Synthèse en 2-3 phrases des thèmes principaux et développements notables à surveiller.*\n\nRÈGLES:\n- Traduis tous les titres en français (garde le sens technique)\n- Résumés concis (2-3 phrases max)\n- URLs exactes (ne pas inventer)\n- Emojis: 🚀 breakthrough, 📄 paper, 💻 code, 📰 news, 🎯 product, 🌐 sonar\n- Ton professionnel mais accessible\n\nEXEMPLE DE TITRE FORMATÉ :\n**1. Plain English surpasse JSON pour les appels d'outils LLM (+18pp précision)** — Note: 9.5/10\n*Cette recherche démontre que l'utilisation du langage naturel améliore significativement la précision des appels d'outils dans les LLM, avec une réduction de 70% de la variance. Impact majeur sur l'architecture des agents IA.*\n🔗 Source: https://www.reddit.com/r/MachineLearning/...\n\nRÉPONDS UNIQUEMENT EN FRANÇAIS."
            },
            {
              "role": "user",
              "content": "Crée le rapport final en français:\n\n**Période:** ${cycle.dates.from} au ${cycle.dates.now}\n\n**Top 10 (5 sources):**\n${cycle.scoring.top10}\n\n**Validation:**\n${cycle.validation.log_message}\n\nGénère un rapport markdown professionnel en français, format strict (titre + note + résumé + URL) × 10."
            }
          ],
          "temperature": 0.1,
          "max_tokens": 4000
        },
        "outputs": {"content": "cycle.result.report"},
        "timeout_sec": 120,
        "retry": {"max": 2, "delay_sec": 10}
      },
      {
        "name": "get_final_timestamp",
        "type": "io",
        "handler": "http_tool",
        "inputs": {"tool": "date", "operation": "now", "tz": "UTC"},
        "outputs": {"result": "cycle.result.completed_at"},
        "timeout_sec": 5
      },
      {
        "name": "stringify_top10_for_report",
        "type": "transform",
        "handler": "json_stringify",
        "inputs": {"value": "${cycle.scoring.top10}"},
        "outputs": {"json_string": "cycle.scoring.top10_json_str_final"}
      },
      {
        "name": "create_reports_table",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "sqlite_db",
          "operation": "execute",
          "db": "ai_curation_reports.db",
          "query": "CREATE TABLE IF NOT EXISTS reports (id INTEGER PRIMARY KEY AUTOINCREMENT, created_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP, date_from TEXT, date_to TEXT, report_markdown TEXT, avg_score REAL, retry_count INTEGER, top10_json TEXT, completed_at TEXT)",
          "params": []
        },
        "outputs": {"success": "cycle.result.table_created"},
        "timeout_sec": 10
      },
      {
        "name": "save_report",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "sqlite_db",
          "operation": "execute",
          "db": "ai_curation_reports.db",
          "query": "INSERT INTO reports (date_from, date_to, report_markdown, avg_score, retry_count, top10_json, completed_at) VALUES (?, ?, ?, ?, ?, ?, ?)",
          "params": ["${cycle.dates.from}", "${cycle.dates.now}", "${cycle.result.report}", "${cycle.validation.sonar_score}", "${cycle.meta.retry_count}", "${cycle.scoring.top10_json_str_final}", "${cycle.result.completed_at}"]
        },
        "outputs": {"success": "cycle.result.saved"},
        "timeout_sec": 15
      },
      {"name": "mark_success", "type": "transform", "handler": "set_value", "inputs": {"value": "Success"}, "outputs": {"result": "cycle.result.status"}},
      {"name": "mark_fail", "type": "transform", "handler": "set_value", "inputs": {"value": "Parse failed"}, "outputs": {"result": "cycle.result.status"}},
      {"name": "EXIT", "type": "exit"}
    ]
  ,
    "edges": [
      {"from": "START", "to": "get_date_now"},
      {"from": "get_date_now", "to": "get_date_from"},
      {"from": "get_date_from", "to": "fetch_news"},
      {"from": "fetch_news", "to": "fetch_reddit"},
      {"from": "fetch_reddit", "to": "fetch_arxiv"},
      {"from": "fetch_arxiv", "to": "fetch_papers_with_code"},
      {"from": "fetch_papers_with_code", "to": "fetch_sonar"},
      {"from": "fetch_sonar", "to": "normalize_sonar_source"},
      {"from": "normalize_sonar_source", "to": "SCORING_LOOP"},
      {"from": "SCORING_LOOP", "to": "get_scoring_timestamp"},
      {"from": "get_scoring_timestamp", "to": "llm_gpt_score"},
      {"from": "llm_gpt_score", "to": "normalize_gpt_score"},
      {"from": "normalize_gpt_score", "to": "check_parse"},
      {"from": "check_parse", "to": "get_validation_timestamp", "when": "true"},
      {"from": "check_parse", "to": "mark_fail", "when": "false"},
      {"from": "get_validation_timestamp", "to": "llm_sonar_validate"},
      {"from": "llm_sonar_validate", "to": "normalize_validation"},
      {"from": "normalize_validation", "to": "extract_score"},
      {"from": "extract_score", "to": "extract_feedback"},
      {"from": "extract_feedback", "to": "get_validation_end_timestamp"},
      {"from": "get_validation_end_timestamp", "to": "stringify_top10_for_log"},
      {"from": "stringify_top10_for_log", "to": "log_validation_to_db"},
      {"from": "log_validation_to_db", "to": "insert_validation_log"},
      {"from": "insert_validation_log", "to": "log_sonar_validation"},
      {"from": "log_sonar_validation", "to": "check_quality"},
      {"from": "check_quality", "to": "llm_format", "when": "true"},
      {"from": "check_quality", "to": "check_retry", "when": "false"},
      {"from": "check_retry", "to": "increment", "when": "true"},
      {"from": "check_retry", "to": "llm_format", "when": "false"},
      {"from": "increment", "to": "SCORING_LOOP"},
      {"from": "llm_format", "to": "get_final_timestamp"},
      {"from": "get_final_timestamp", "to": "stringify_top10_for_report"},
      {"from": "stringify_top10_for_report", "to": "create_reports_table"},
      {"from": "create_reports_table", "to": "save_report"},
      {"from": "save_report", "to": "mark_success"},
      {"from": "mark_success", "to": "EXIT"},
      {"from": "mark_fail", "to": "EXIT"}
    ],
    "scopes": [
      {"name": "dates", "reset_on": [], "seed": {}},
      {"name": "sources", "reset_on": [], "seed": {}},
      {"name": "scoring", "reset_on": [], "seed": {}},
      {"name": "validation", "reset_on": [], "seed": {}},
      {"name": "result", "reset_on": [], "seed": {}},
      {"name": "meta", "reset_on": [], "seed": {"retry_count": 0}}
    ]
  },
  "graph_mermaid": "graph TD\n  START-->get_date_now\n  get_date_now-->get_date_from\n  get_date_from-->fetch_news[Fetch News 8 items]\n  fetch_news-->fetch_reddit[Fetch Reddit 3x3 posts]\n  fetch_reddit-->fetch_arxiv[Fetch arXiv 8 papers]\n  fetch_arxiv-->fetch_pwc[Fetch Papers With Code]\n  fetch_pwc-->fetch_sonar[Fetch Sonar real-time]\n  fetch_sonar-->normalize_sonar[Normalize Sonar JSON]\n  normalize_sonar-->SCORING_LOOP[SCORING LOOP]\n  SCORING_LOOP-->llm_gpt_score[LLM GPT: Score Top 10]\n  llm_gpt_score-->normalize_gpt[Normalize GPT JSON]\n  normalize_gpt-->check_parse{Parse OK?}\n  check_parse-->|true|llm_sonar_validate[LLM Sonar: Validate]\n  check_parse-->|false|mark_fail\n  llm_sonar_validate-->normalize_validation[Normalize Validation]\n  normalize_validation-->extract_score[Extract Score]\n  extract_score-->extract_feedback[Extract Feedback]\n  extract_feedback-->stringify_log[JSON Stringify for Log]\n  stringify_log-->insert_log[Insert validation_logs]\n  insert_log-->check_quality{Score >= 7?}\n  check_quality-->|true|llm_format[LLM: Format FR]\n  check_quality-->|false|check_retry{Retry < 3?}\n  check_retry-->|true|increment[Increment retry_count]\n  check_retry-->|false|llm_format\n  increment-->SCORING_LOOP\n  llm_format-->stringify_report[JSON Stringify for Report]\n  stringify_report-->save_db[Save to SQLite]\n  save_db-->mark_success\n  mark_success-->EXIT\n  mark_fail-->EXIT"
}
