{
  "version": "1.0",
  "process_version": "4.1.0-sonar-logged",
  "metadata": {
    "description": "AI/LLM Curation avec Perplexity Sonar + logging validation",
    "author": "orchestrator-production"
  },
  "worker_ctx": {
    "timezone": "UTC",
    "llm_model": "gpt-4o-mini",
    "sonar_model": "sonar",
    "llm_temperature": 0.3,
    "quality_threshold": 7,
    "max_retries": 3
  },
  "graph": {
    "nodes": [
      {"name": "START", "type": "start"},
      {
        "name": "get_date_now",
        "type": "io",
        "handler": "http_tool",
        "inputs": {"tool": "date", "operation": "now", "tz": "UTC"},
        "outputs": {"result": "cycle.dates.now"},
        "timeout_sec": 10
      },
      {
        "name": "get_date_from",
        "type": "io",
        "handler": "http_tool",
        "inputs": {"tool": "date", "operation": "add", "date": "${cycle.dates.now}", "days": -3},
        "outputs": {"result": "cycle.dates.from"},
        "timeout_sec": 10
      },
      {
        "name": "fetch_news",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "news_aggregator",
          "operation": "search_news",
          "query": "AI OR LLM OR GPT",
          "providers": ["nyt", "guardian"],
          "from_date": "${cycle.dates.from}",
          "to_date": "${cycle.dates.now}",
          "limit": 5
        },
        "outputs": {"articles": "cycle.sources.news"},
        "timeout_sec": 30,
        "retry": {"max": 2, "delay_sec": 5}
      },
      {
        "name": "fetch_reddit",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "reddit_intelligence",
          "operation": "multi_search",
          "subreddits": ["MachineLearning", "LocalLLaMA"],
          "query": "AI OR LLM",
          "limit_per_sub": 2,
          "time_filter": "week"
        },
        "outputs": {"results": "cycle.sources.reddit"},
        "timeout_sec": 30,
        "retry": {"max": 2, "delay_sec": 5}
      },
      {
        "name": "fetch_arxiv",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "academic_research_super",
          "operation": "search_papers",
          "query": "LLM OR GPT OR transformer",
          "sources": ["arxiv"],
          "max_results": 5,
          "include_abstracts": false
        },
        "outputs": {"results": "cycle.sources.arxiv"},
        "timeout_sec": 30,
        "retry": {"max": 2, "delay_sec": 5}
      },
      {
        "name": "SCORING_LOOP",
        "type": "transform",
        "handler": "set_value",
        "inputs": {"value": "scoring"},
        "outputs": {"result": "cycle.meta.phase"}
      },
      {
        "name": "llm_gpt_score",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "call_llm",
          "operation": "call",
          "model": "${worker.llm_model}",
          "messages": [
            {"role": "system", "content": "AI/LLM expert curator. Score on relevance, novelty, quality. Output ONLY valid JSON array with top 10: [{\"source\": \"news|reddit|arxiv\", \"title\": \"...\", \"url\": \"...\", \"score\": 9.5, \"reason\": \"...\"}]"},
            {"role": "user", "content": "Score these, return EXACTLY top 10 JSON:\n\nNEWS: ${cycle.sources.news}\n\nREDDIT: ${cycle.sources.reddit}\n\nARXIV: ${cycle.sources.arxiv}"}
          ],
          "temperature": 0.3,
          "max_tokens": 2000
        },
        "outputs": {"content": "cycle.scoring.gpt_raw"},
        "timeout_sec": 90,
        "retry": {"max": 2, "delay_sec": 10}
      },
      {
        "name": "normalize_gpt",
        "type": "transform",
        "handler": "normalize_llm_output",
        "inputs": {"content": "${cycle.scoring.gpt_raw}", "expected_format": "json", "fallback_value": []},
        "outputs": {"parsed": "cycle.scoring.gpt_top10", "success": "cycle.scoring.gpt_ok"}
      },
      {
        "name": "llm_sonar_top10",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "call_llm",
          "operation": "call",
          "model": "${worker.sonar_model}",
          "messages": [
            {"role": "system", "content": "You are Perplexity Sonar with real-time web access. Find top 10 most important AI/LLM developments from last 3 days. Output ONLY valid JSON: [{\"source\": \"web|twitter|github|arxiv\", \"title\": \"...\", \"url\": \"...\", \"score\": 9.5, \"reason\": \"...\"}]"},
            {"role": "user", "content": "Search web for top 10 AI/LLM developments from last 3 days (since ${cycle.dates.from}). Return ONLY JSON array."}
          ],
          "temperature": 0.3,
          "max_tokens": 2000
        },
        "outputs": {"content": "cycle.scoring.sonar_raw"},
        "timeout_sec": 90,
        "retry": {"max": 2, "delay_sec": 10}
      },
      {
        "name": "normalize_sonar",
        "type": "transform",
        "handler": "normalize_llm_output",
        "inputs": {"content": "${cycle.scoring.sonar_raw}", "expected_format": "json", "fallback_value": []},
        "outputs": {"parsed": "cycle.scoring.sonar_top10"}
      },
      {
        "name": "check_parse",
        "type": "decision",
        "decision": {"kind": "truthy", "input": "${cycle.scoring.gpt_ok}"}
      },
      {
        "name": "llm_sonar_validate",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "call_llm",
          "operation": "call",
          "model": "${worker.sonar_model}",
          "messages": [
            {"role": "system", "content": "Quality validator for AI/LLM curation. Rate overall quality (1-10) based on: relevance, novelty, source quality, diversity. Be critical. Return ONLY JSON: {\"score\": 8.5, \"feedback\": \"Brief assessment\"}"},
            {"role": "user", "content": "Validate this top 10:\n\nGPT picks: ${cycle.scoring.gpt_top10}\n\nSonar picks: ${cycle.scoring.sonar_top10}\n\nRate quality (1-10). Return ONLY JSON."}
          ],
          "temperature": 0.2,
          "max_tokens": 500
        },
        "outputs": {"content": "cycle.validation.sonar_raw"},
        "timeout_sec": 60,
        "retry": {"max": 2, "delay_sec": 10}
      },
      {
        "name": "normalize_validation",
        "type": "transform",
        "handler": "normalize_llm_output",
        "inputs": {"content": "${cycle.validation.sonar_raw}", "expected_format": "json", "fallback_value": {"score": 0, "feedback": "Parse failed"}},
        "outputs": {"parsed": "cycle.validation.sonar_result"}
      },
      {
        "name": "extract_score",
        "type": "transform",
        "handler": "extract_field",
        "inputs": {"data": "${cycle.validation.sonar_result}", "path": "score", "default": 0},
        "outputs": {"value": "cycle.validation.sonar_score"}
      },
      {
        "name": "extract_feedback",
        "type": "transform",
        "handler": "extract_field",
        "inputs": {"data": "${cycle.validation.sonar_result}", "path": "feedback", "default": "No feedback"},
        "outputs": {"value": "cycle.validation.sonar_feedback"}
      },
      {
        "name": "log_sonar_validation",
        "type": "transform",
        "handler": "format_template",
        "inputs": {
          "template": "SONAR VALIDATION (Attempt {attempt}): Score {score}/10 - {feedback}",
          "attempt": "${cycle.meta.retry_count}",
          "score": "${cycle.validation.sonar_score}",
          "feedback": "${cycle.validation.sonar_feedback}"
        },
        "outputs": {"text": "cycle.validation.log_message"}
      },
      {
        "name": "check_quality",
        "type": "decision",
        "decision": {"kind": "compare", "input": "${cycle.validation.sonar_score}", "operator": ">=", "value": 7}
      },
      {
        "name": "check_retry",
        "type": "decision",
        "decision": {"kind": "compare", "input": "${cycle.meta.retry_count}", "operator": "<", "value": 3}
      },
      {
        "name": "increment",
        "type": "transform",
        "handler": "increment",
        "inputs": {"value": "${cycle.meta.retry_count}"},
        "outputs": {"result": "cycle.meta.retry_count"}
      },
      {
        "name": "llm_format",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "call_llm",
          "operation": "call",
          "model": "${worker.llm_model}",
          "messages": [
            {"role": "system", "content": "Create markdown report: title, date, intro, two sections (GPT-4o-mini Top 10, Sonar Top 10), numbered lists with **#N. [Title](url)** (source) - Score: X/10 - Summary. Add conclusion with Sonar quality assessment."},
            {"role": "user", "content": "Format report:\n\nDate: ${cycle.dates.from} to ${cycle.dates.now}\n\nGPT picks: ${cycle.scoring.gpt_top10}\n\nSonar picks: ${cycle.scoring.sonar_top10}\n\nSonar validation: ${cycle.validation.log_message}"}
          ],
          "temperature": 0.5,
          "max_tokens": 3000
        },
        "outputs": {"content": "cycle.result.report"},
        "timeout_sec": 90,
        "retry": {"max": 2, "delay_sec": 10}
      },
      {
        "name": "save_report",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "sqlite_db",
          "operation": "execute",
          "db": "ai_curation_reports.db",
          "query": "INSERT INTO reports (date_from, date_to, report_markdown, avg_score, retry_count) VALUES (?, ?, ?, ?, ?)",
          "params": ["${cycle.dates.from}", "${cycle.dates.now}", "${cycle.result.report}", "${cycle.validation.sonar_score}", "${cycle.meta.retry_count}"]
        },
        "outputs": {"success": "cycle.result.saved"},
        "timeout_sec": 15
      },
      {"name": "mark_success", "type": "transform", "handler": "set_value", "inputs": {"value": "Success"}, "outputs": {"result": "cycle.result.status"}},
      {"name": "mark_fail", "type": "transform", "handler": "set_value", "inputs": {"value": "Parse failed"}, "outputs": {"result": "cycle.result.status"}},
      {"name": "EXIT", "type": "exit"}
    ],
    "edges": [
      {"from": "START", "to": "get_date_now"},
      {"from": "get_date_now", "to": "get_date_from"},
      {"from": "get_date_from", "to": "fetch_news"},
      {"from": "fetch_news", "to": "fetch_reddit"},
      {"from": "fetch_reddit", "to": "fetch_arxiv"},
      {"from": "fetch_arxiv", "to": "SCORING_LOOP"},
      {"from": "SCORING_LOOP", "to": "llm_gpt_score"},
      {"from": "llm_gpt_score", "to": "normalize_gpt"},
      {"from": "normalize_gpt", "to": "llm_sonar_top10"},
      {"from": "llm_sonar_top10", "to": "normalize_sonar"},
      {"from": "normalize_sonar", "to": "check_parse"},
      {"from": "check_parse", "to": "llm_sonar_validate", "when": "true"},
      {"from": "check_parse", "to": "mark_fail", "when": "false"},
      {"from": "llm_sonar_validate", "to": "normalize_validation"},
      {"from": "normalize_validation", "to": "extract_score"},
      {"from": "extract_score", "to": "extract_feedback"},
      {"from": "extract_feedback", "to": "log_sonar_validation"},
      {"from": "log_sonar_validation", "to": "check_quality"},
      {"from": "check_quality", "to": "llm_format", "when": "true"},
      {"from": "check_quality", "to": "check_retry", "when": "false"},
      {"from": "check_retry", "to": "increment", "when": "true"},
      {"from": "check_retry", "to": "llm_format", "when": "false"},
      {"from": "increment", "to": "SCORING_LOOP"},
      {"from": "llm_format", "to": "save_report"},
      {"from": "save_report", "to": "mark_success"},
      {"from": "mark_success", "to": "EXIT"},
      {"from": "mark_fail", "to": "EXIT"}
    ],
    "scopes": [
      {"name": "dates", "reset_on": [], "seed": {}},
      {"name": "sources", "reset_on": [], "seed": {}},
      {"name": "scoring", "reset_on": [], "seed": {}},
      {"name": "validation", "reset_on": [], "seed": {}},
      {"name": "result", "reset_on": [], "seed": {}},
      {"name": "meta", "reset_on": [], "seed": {"retry_count": 0}}
    ]
  }
}
