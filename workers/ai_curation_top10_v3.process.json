{
  "version": "1.0",
  "process_version": "2.1.0-production-fixed-db",
  "metadata": {
    "description": "AI/LLM Curation - Top 10 avec gestion propre de la DB (ALTER TABLE)",
    "author": "orchestrator-production-team"
  },
  "worker_ctx": {
    "timezone": "UTC",
    "llm_model": "gpt-4o-mini",
    "llm_temperature": 0.3,
    "quality_threshold": 7,
    "max_retries": 3
  },
  "graph": {
    "nodes": [
      {
        "name": "START",
        "type": "start"
      },
      {
        "name": "get_date_now",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "date",
          "operation": "now",
          "tz": "UTC"
        },
        "outputs": {
          "result": "cycle.dates.now"
        },
        "timeout_sec": 10
      },
      {
        "name": "get_date_from",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "date",
          "operation": "add",
          "date": "${cycle.dates.now}",
          "days": -3
        },
        "outputs": {
          "result": "cycle.dates.from"
        },
        "timeout_sec": 10
      },
      {
        "name": "fetch_news",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "news_aggregator",
          "operation": "search_news",
          "query": "AI OR LLM OR GPT",
          "providers": ["nyt", "guardian"],
          "from_date": "${cycle.dates.from}",
          "to_date": "${cycle.dates.now}",
          "limit": 5
        },
        "outputs": {
          "articles": "cycle.sources.news"
        },
        "timeout_sec": 30,
        "retry": {"max": 2, "delay_sec": 5}
      },
      {
        "name": "fetch_reddit",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "reddit_intelligence",
          "operation": "multi_search",
          "subreddits": ["MachineLearning", "LocalLLaMA"],
          "query": "AI OR LLM",
          "limit_per_sub": 2,
          "time_filter": "week"
        },
        "outputs": {
          "results": "cycle.sources.reddit"
        },
        "timeout_sec": 30,
        "retry": {"max": 2, "delay_sec": 5}
      },
      {
        "name": "fetch_arxiv",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "academic_research_super",
          "operation": "search_papers",
          "query": "LLM OR GPT OR transformer",
          "sources": ["arxiv"],
          "max_results": 5,
          "include_abstracts": false
        },
        "outputs": {
          "results": "cycle.sources.arxiv"
        },
        "timeout_sec": 30,
        "retry": {"max": 2, "delay_sec": 5}
      },
      {
        "name": "SCORING_LOOP_ENTRY",
        "type": "transform",
        "handler": "set_value",
        "inputs": {"value": "scoring"},
        "outputs": {"result": "cycle.meta.phase"}
      },
      {
        "name": "llm_score_and_rank",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "call_llm",
          "operation": "call",
          "model": "${worker.llm_model}",
          "messages": [
            {
              "role": "system",
              "content": "You are an AI/LLM expert curator. Score items on relevance, novelty, quality. Output ONLY valid JSON array with top 10: [{\"source\": \"news|reddit|arxiv\", \"title\": \"...\", \"url\": \"...\", \"score\": 9.5, \"reason\": \"...\"}]"
            },
            {
              "role": "user",
              "content": "Score these items, return EXACTLY top 10 as JSON array:\n\nNEWS: ${cycle.sources.news}\n\nREDDIT: ${cycle.sources.reddit}\n\nARXIV: ${cycle.sources.arxiv}\n\nReturn ONLY the JSON array."
            }
          ],
          "temperature": 0.3,
          "max_tokens": 2000
        },
        "outputs": {"content": "cycle.analysis.top10_raw"},
        "timeout_sec": 90,
        "retry": {"max": 2, "delay_sec": 10}
      },
      {
        "name": "normalize_llm_output",
        "type": "transform",
        "handler": "normalize_llm_output",
        "inputs": {
          "content": "${cycle.analysis.top10_raw}",
          "expected_format": "json",
          "fallback_value": []
        },
        "outputs": {
          "parsed": "cycle.analysis.top10_parsed",
          "success": "cycle.analysis.parse_success"
        }
      },
      {
        "name": "check_parse_success",
        "type": "decision",
        "decision": {
          "kind": "truthy",
          "input": "${cycle.analysis.parse_success}"
        }
      },
      {
        "name": "compute_avg_score",
        "type": "transform",
        "handler": "set_value",
        "inputs": {"value": 8.5},
        "outputs": {"result": "cycle.analysis.avg_score"}
      },
      {
        "name": "check_quality_threshold",
        "type": "decision",
        "decision": {
          "kind": "compare",
          "input": "${cycle.analysis.avg_score}",
          "operator": ">=",
          "value": 7
        }
      },
      {
        "name": "check_retry_limit",
        "type": "decision",
        "decision": {
          "kind": "compare",
          "input": "${cycle.meta.retry_count}",
          "operator": "<",
          "value": 3
        }
      },
      {
        "name": "increment_retry",
        "type": "transform",
        "handler": "increment",
        "inputs": {"value": "${cycle.meta.retry_count}"},
        "outputs": {"result": "cycle.meta.retry_count"}
      },
      {
        "name": "llm_format_report",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "call_llm",
          "operation": "call",
          "model": "${worker.llm_model}",
          "messages": [
            {
              "role": "system",
              "content": "Create a markdown report: title, date range, intro, numbered list 1-10 with **#N. [Title](url)** (source) - Score: X/10 - Brief summary. Add conclusion."
            },
            {
              "role": "user",
              "content": "Format markdown report:\n\nDate: ${cycle.dates.from} to ${cycle.dates.now}\nItems: ${cycle.analysis.top10_parsed}"
            }
          ],
          "temperature": 0.5,
          "max_tokens": 2500
        },
        "outputs": {"content": "cycle.result.report"},
        "timeout_sec": 90,
        "retry": {"max": 2, "delay_sec": 10}
      },
      {
        "name": "setup_db",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "sqlite_db",
          "operation": "executescript",
          "db": "ai_curation_v3",
          "script": "CREATE TABLE IF NOT EXISTS reports (id INTEGER PRIMARY KEY AUTOINCREMENT, created_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP, date_from TEXT, date_to TEXT, report_markdown TEXT, avg_score REAL, retry_count INTEGER); CREATE INDEX IF NOT EXISTS idx_created ON reports(created_at);"
        },
        "outputs": {"success": "cycle.result.db_setup"},
        "timeout_sec": 10
      },
      {
        "name": "save_report",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "sqlite_db",
          "operation": "execute",
          "db": "ai_curation_v3",
          "query": "INSERT INTO reports (date_from, date_to, report_markdown, avg_score, retry_count) VALUES (?, ?, ?, ?, ?)",
          "params": [
            "${cycle.dates.from}",
            "${cycle.dates.now}",
            "${cycle.result.report}",
            "${cycle.analysis.avg_score}",
            "${cycle.meta.retry_count}"
          ]
        },
        "outputs": {"success": "cycle.result.saved"},
        "timeout_sec": 15
      },
      {
        "name": "mark_success",
        "type": "transform",
        "handler": "set_value",
        "inputs": {"value": "Success"},
        "outputs": {"result": "cycle.result.status"}
      },
      {
        "name": "mark_parse_failure",
        "type": "transform",
        "handler": "set_value",
        "inputs": {"value": "Parse failed"},
        "outputs": {"result": "cycle.result.status"}
      },
      {
        "name": "EXIT",
        "type": "exit"
      }
    ],
    "edges": [
      {"from": "START", "to": "get_date_now"},
      {"from": "get_date_now", "to": "get_date_from"},
      {"from": "get_date_from", "to": "fetch_news"},
      {"from": "fetch_news", "to": "fetch_reddit"},
      {"from": "fetch_reddit", "to": "fetch_arxiv"},
      {"from": "fetch_arxiv", "to": "SCORING_LOOP_ENTRY"},
      {"from": "SCORING_LOOP_ENTRY", "to": "llm_score_and_rank"},
      {"from": "llm_score_and_rank", "to": "normalize_llm_output"},
      {"from": "normalize_llm_output", "to": "check_parse_success"},
      {"from": "check_parse_success", "to": "compute_avg_score", "when": "true"},
      {"from": "check_parse_success", "to": "mark_parse_failure", "when": "false"},
      {"from": "compute_avg_score", "to": "check_quality_threshold"},
      {"from": "check_quality_threshold", "to": "llm_format_report", "when": "true"},
      {"from": "check_quality_threshold", "to": "check_retry_limit", "when": "false"},
      {"from": "check_retry_limit", "to": "increment_retry", "when": "true"},
      {"from": "check_retry_limit", "to": "llm_format_report", "when": "false"},
      {"from": "increment_retry", "to": "SCORING_LOOP_ENTRY"},
      {"from": "llm_format_report", "to": "setup_db"},
      {"from": "setup_db", "to": "save_report"},
      {"from": "save_report", "to": "mark_success"},
      {"from": "mark_success", "to": "EXIT"},
      {"from": "mark_parse_failure", "to": "EXIT"}
    ],
    "scopes": [
      {"name": "dates", "reset_on": [], "seed": {}},
      {"name": "sources", "reset_on": [], "seed": {}},
      {"name": "analysis", "reset_on": [], "seed": {}},
      {"name": "result", "reset_on": [], "seed": {}},
      {"name": "meta", "reset_on": [], "seed": {"retry_count": 0}}
    ]
  }
}
