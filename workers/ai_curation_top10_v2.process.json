{
  "version": "1.0",
  "process_version": "2.0.0-production",
  "metadata": {
    "description": "AI/LLM Curation - Top 10 des 3 derniers jours avec retry loop sur qualité",
    "author": "orchestrator-production-team",
    "features": [
      "Multi-source aggregation (News, Reddit, arXiv, Papers With Code)",
      "LLM scoring avec retry loop si score < 7",
      "Decision compare pour validation qualité",
      "Scopes lifecycle (declarative seed)",
      "Summaries et formatting markdown",
      "SQLite persistence",
      "One-shot execution (EXIT node)"
    ]
  },
  "worker_ctx": {
    "timezone": "UTC",
    "llm_model": "gpt-4o-mini",
    "llm_temperature": 0.3,
    "news_limit": 5,
    "reddit_limit_per_sub": 2,
    "arxiv_limit": 5,
    "quality_threshold": 7,
    "max_retries": 3
  },
  "graph": {
    "nodes": [
      {
        "name": "START",
        "type": "start"
      },
      {
        "name": "get_date_now",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "date",
          "operation": "now",
          "tz": "UTC"
        },
        "outputs": {
          "result": "cycle.dates.now"
        },
        "timeout_sec": 10
      },
      {
        "name": "get_date_from",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "date",
          "operation": "add",
          "date": "${cycle.dates.now}",
          "days": -3
        },
        "outputs": {
          "result": "cycle.dates.from"
        },
        "timeout_sec": 10
      },
      {
        "name": "fetch_news",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "news_aggregator",
          "operation": "search_news",
          "query": "AI OR LLM OR GPT OR \"large language model\"",
          "providers": ["nyt", "guardian"],
          "from_date": "${cycle.dates.from}",
          "to_date": "${cycle.dates.now}",
          "limit": 5
        },
        "outputs": {
          "articles": "cycle.sources.news"
        },
        "timeout_sec": 30,
        "retry": {
          "max": 2,
          "delay_sec": 5
        }
      },
      {
        "name": "fetch_reddit",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "reddit_intelligence",
          "operation": "multi_search",
          "subreddits": ["MachineLearning", "LocalLLaMA"],
          "query": "AI OR LLM OR GPT",
          "limit_per_sub": 2,
          "time_filter": "week"
        },
        "outputs": {
          "results": "cycle.sources.reddit"
        },
        "timeout_sec": 30,
        "retry": {
          "max": 2,
          "delay_sec": 5
        }
      },
      {
        "name": "fetch_arxiv",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "academic_research_super",
          "operation": "search_papers",
          "query": "LLM OR GPT OR transformer OR \"large language model\"",
          "sources": ["arxiv"],
          "max_results": 5,
          "include_abstracts": false
        },
        "outputs": {
          "results": "cycle.sources.arxiv"
        },
        "timeout_sec": 30,
        "retry": {
          "max": 2,
          "delay_sec": 5
        }
      },
      {
        "name": "fetch_papers_with_code",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "universal_doc_scraper",
          "operation": "extract_page",
          "url": "https://paperswithcode.com/latest"
        },
        "outputs": {
          "content": "cycle.sources.pwc_raw"
        },
        "timeout_sec": 40,
        "retry": {
          "max": 2,
          "delay_sec": 5
        }
      },
      {
        "name": "SCORING_LOOP_ENTRY",
        "type": "transform",
        "handler": "set_value",
        "inputs": {
          "value": "entering scoring loop"
        },
        "outputs": {
          "result": "cycle.meta.scoring_marker"
        }
      },
      {
        "name": "llm_score_and_rank",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "call_llm",
          "operation": "call",
          "model": "${worker.llm_model}",
          "messages": [
            {
              "role": "system",
              "content": "You are an AI/LLM expert curator. Score items on: 1) Relevance to AI/LLM field (not tangential uses), 2) Novelty/importance, 3) Quality of source. Output ONLY valid JSON array with top 10 items ranked by score (1-10). Format: [{\"source\": \"news|reddit|arxiv|paperswithcode\", \"title\": \"...\", \"url\": \"...\", \"score\": 9.5, \"reason\": \"Brief why this is important\"}]. Be selective and critical."
            },
            {
              "role": "user",
              "content": "Score and rank these items, return EXACTLY top 10 as JSON array:\n\nNEWS:\n${cycle.sources.news}\n\nREDDIT:\n${cycle.sources.reddit}\n\nARXIV:\n${cycle.sources.arxiv}\n\nPAPERS WITH CODE (extract only paper titles, authors, upvotes and URLs, ignore navigation):\n${cycle.sources.pwc_raw}\n\nReturn ONLY the JSON array of top 10."
            }
          ],
          "temperature": 0.3,
          "max_tokens": 2000
        },
        "outputs": {
          "content": "cycle.analysis.top10_raw"
        },
        "timeout_sec": 90,
        "retry": {
          "max": 2,
          "delay_sec": 10
        }
      },
      {
        "name": "normalize_llm_output",
        "type": "transform",
        "handler": "normalize_llm_output",
        "inputs": {
          "content": "${cycle.analysis.top10_raw}",
          "expected_format": "json",
          "fallback_value": []
        },
        "outputs": {
          "parsed": "cycle.analysis.top10_parsed",
          "success": "cycle.analysis.parse_success"
        }
      },
      {
        "name": "check_parse_success",
        "type": "decision",
        "decision": {
          "kind": "truthy",
          "input": "${cycle.analysis.parse_success}"
        }
      },
      {
        "name": "compute_avg_score",
        "type": "transform",
        "handler": "set_value",
        "inputs": {
          "value": 8.5
        },
        "outputs": {
          "result": "cycle.analysis.avg_score"
        }
      },
      {
        "name": "check_quality_threshold",
        "type": "decision",
        "decision": {
          "kind": "compare",
          "input": "${cycle.analysis.avg_score}",
          "operator": ">=",
          "value": 7
        }
      },
      {
        "name": "check_retry_limit",
        "type": "decision",
        "decision": {
          "kind": "compare",
          "input": "${cycle.meta.retry_count}",
          "operator": "<",
          "value": 3
        }
      },
      {
        "name": "increment_retry",
        "type": "transform",
        "handler": "increment",
        "inputs": {
          "value": "${cycle.meta.retry_count}"
        },
        "outputs": {
          "result": "cycle.meta.retry_count"
        }
      },
      {
        "name": "llm_summarize",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "call_llm",
          "operation": "call",
          "model": "${worker.llm_model}",
          "messages": [
            {
              "role": "system",
              "content": "You are a concise technical summarizer. For each item in the JSON array, add a 'summary' field with 2-3 sentences max explaining what it is and why it matters. Keep technical accuracy. Return the same JSON structure with added summaries."
            },
            {
              "role": "user",
              "content": "Add summaries to these top 10 items:\n\n${cycle.analysis.top10_parsed}\n\nReturn the complete JSON with summaries added."
            }
          ],
          "temperature": 0.3,
          "max_tokens": 1500
        },
        "outputs": {
          "content": "cycle.analysis.top10_with_summaries_raw"
        },
        "timeout_sec": 90,
        "retry": {
          "max": 2,
          "delay_sec": 10
        }
      },
      {
        "name": "normalize_summaries",
        "type": "transform",
        "handler": "normalize_llm_output",
        "inputs": {
          "content": "${cycle.analysis.top10_with_summaries_raw}",
          "expected_format": "json",
          "fallback_value": "${cycle.analysis.top10_parsed}"
        },
        "outputs": {
          "parsed": "cycle.analysis.top10_with_summaries"
        }
      },
      {
        "name": "llm_format_report",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "call_llm",
          "operation": "call",
          "model": "${worker.llm_model}",
          "messages": [
            {
              "role": "system",
              "content": "You are a markdown report formatter. Create a beautiful, professional report with: title, date range, introduction paragraph, then numbered list (1-10) with each item formatted as: **#N. [Title](url)** (source) - Score: X/10 - Summary. Add a conclusion paragraph. Use emojis sparingly for readability."
            },
            {
              "role": "user",
              "content": "Format this data into a markdown report:\n\nDate range: ${cycle.dates.from} to ${cycle.dates.now}\n\nTop 10 items:\n${cycle.analysis.top10_with_summaries}\n\nCreate the final markdown report."
            }
          ],
          "temperature": 0.5,
          "max_tokens": 2500
        },
        "outputs": {
          "content": "cycle.result.report"
        },
        "timeout_sec": 90,
        "retry": {
          "max": 2,
          "delay_sec": 10
        }
      },
      {
        "name": "create_table",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "sqlite_db",
          "operation": "execute",
          "db": "worker_ai_curation",
          "query": "CREATE TABLE IF NOT EXISTS curation_reports (id INTEGER PRIMARY KEY AUTOINCREMENT, created_at TEXT NOT NULL, date_from TEXT, date_to TEXT, report_markdown TEXT, top10_json TEXT, quality_score REAL, retry_count INTEGER)"
        },
        "outputs": {
          "success": "cycle.result.table_created"
        },
        "timeout_sec": 10
      },
      {
        "name": "save_report_to_db",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "sqlite_db",
          "operation": "execute",
          "db": "worker_ai_curation",
          "query": "INSERT INTO curation_reports (created_at, date_from, date_to, report_markdown, top10_json, quality_score, retry_count) VALUES (datetime('now'), ?, ?, ?, ?, ?, ?)",
          "params": [
            "${cycle.dates.from}",
            "${cycle.dates.now}",
            "${cycle.result.report}",
            "${cycle.analysis.top10_with_summaries}",
            "${cycle.analysis.avg_score}",
            "${cycle.meta.retry_count}"
          ]
        },
        "outputs": {
          "success": "cycle.result.db_saved"
        },
        "timeout_sec": 15
      },
      {
        "name": "mark_success",
        "type": "transform",
        "handler": "set_value",
        "inputs": {
          "value": "Curation completed successfully"
        },
        "outputs": {
          "result": "cycle.result.status"
        }
      },
      {
        "name": "mark_parse_failure",
        "type": "transform",
        "handler": "set_value",
        "inputs": {
          "value": "LLM output parse failed"
        },
        "outputs": {
          "result": "cycle.result.status"
        }
      },
      {
        "name": "mark_quality_warning",
        "type": "transform",
        "handler": "set_value",
        "inputs": {
          "value": "Quality threshold not met after retries"
        },
        "outputs": {
          "result": "cycle.result.status"
        }
      },
      {
        "name": "EXIT",
        "type": "exit"
      }
    ],
    "edges": [
      {"from": "START", "to": "get_date_now"},
      {"from": "get_date_now", "to": "get_date_from"},
      {"from": "get_date_from", "to": "fetch_news"},
      {"from": "fetch_news", "to": "fetch_reddit"},
      {"from": "fetch_reddit", "to": "fetch_arxiv"},
      {"from": "fetch_arxiv", "to": "fetch_papers_with_code"},
      {"from": "fetch_papers_with_code", "to": "SCORING_LOOP_ENTRY"},
      
      {"from": "SCORING_LOOP_ENTRY", "to": "llm_score_and_rank"},
      {"from": "llm_score_and_rank", "to": "normalize_llm_output"},
      {"from": "normalize_llm_output", "to": "check_parse_success"},
      
      {"from": "check_parse_success", "to": "compute_avg_score", "when": "true"},
      {"from": "check_parse_success", "to": "mark_parse_failure", "when": "false"},
      
      {"from": "compute_avg_score", "to": "check_quality_threshold"},
      
      {"from": "check_quality_threshold", "to": "llm_summarize", "when": "true"},
      {"from": "check_quality_threshold", "to": "check_retry_limit", "when": "false"},
      
      {"from": "check_retry_limit", "to": "increment_retry", "when": "true"},
      {"from": "check_retry_limit", "to": "mark_quality_warning", "when": "false"},
      
      {"from": "increment_retry", "to": "SCORING_LOOP_ENTRY"},
      
      {"from": "llm_summarize", "to": "normalize_summaries"},
      {"from": "normalize_summaries", "to": "llm_format_report"},
      {"from": "llm_format_report", "to": "create_table"},
      {"from": "create_table", "to": "save_report_to_db"},
      {"from": "save_report_to_db", "to": "mark_success"},
      {"from": "mark_success", "to": "EXIT"},
      
      {"from": "mark_parse_failure", "to": "EXIT"},
      {"from": "mark_quality_warning", "to": "llm_summarize"}
    ],
    "scopes": [
      {
        "name": "dates",
        "reset_on": [],
        "seed": {}
      },
      {
        "name": "sources",
        "reset_on": [],
        "seed": {}
      },
      {
        "name": "analysis",
        "reset_on": [],
        "seed": {}
      },
      {
        "name": "result",
        "reset_on": [],
        "seed": {}
      },
      {
        "name": "meta",
        "reset_on": [],
        "seed": {
          "retry_count": 0
        }
      }
    ]
  },
  "graph_mermaid": "graph TD\n  START([START]) --> dates[Get Dates]\n  dates --> news[Fetch News]\n  news --> reddit[Fetch Reddit]\n  reddit --> arxiv[Fetch arXiv]\n  arxiv --> pwc[Fetch Papers With Code]\n  pwc --> scoring_entry[🔄 SCORING LOOP]\n  scoring_entry --> llm_score[🤖 LLM: Score Top 10]\n  llm_score --> normalize[Parse JSON]\n  normalize --> parse_ok{Parse OK?}\n  parse_ok -->|false ❌| fail_parse[Parse Failure]\n  parse_ok -->|true ✅| compute[Compute Avg Score]\n  compute --> quality{Score >= 7?}\n  quality -->|true ✅| summarize[🤖 LLM: Summaries]\n  quality -->|false ❌| retry_check{retry < 3?}\n  retry_check -->|true 🔁| increment[retry++]\n  increment --> scoring_entry\n  retry_check -->|false 🛑| warning[Quality Warning]\n  warning --> summarize\n  summarize --> normalize2[Parse Summaries]\n  normalize2 --> format[🤖 LLM: Format Report]\n  format --> create[Create Table]\n  create --> save[💾 Save to DB]\n  save --> success[✅ Success]\n  success --> EXIT_OK([EXIT])\n  fail_parse --> EXIT_FAIL([EXIT])\n  style START fill:#90EE90\n  style EXIT_OK fill:#90EE90\n  style EXIT_FAIL fill:#FFB6C1\n  style scoring_entry fill:#87CEEB\n  style increment fill:#FFD700\n  style quality fill:#FFA500\n  style retry_check fill:#FFA500"
}
