{
  "version": "1.0",
  "process_version": "6.0.1-single-db",
  "metadata": {
    "description": "AI/LLM Curation v6 - Architecture modulaire avec $import + base unique",
    "author": "orchestrator-production",
    "changelog": "v6.0.1: Une seule DB (worker_ai_curation_data)"
  },
  "worker_ctx": {"$import": "config/worker_ctx.json"},
  "graph": {
    "nodes": [
      {"name": "START", "type": "start"},
      {
        "name": "get_date_now",
        "type": "io",
        "handler": "http_tool",
        "inputs": {"tool": "date", "operation": "now", "tz": "UTC"},
        "outputs": {"result": "cycle.dates.now"},
        "timeout_sec": 10
      },
      {
        "name": "get_date_from",
        "type": "io",
        "handler": "http_tool",
        "inputs": {"tool": "date", "operation": "add", "date": "${cycle.dates.now}", "days": -3},
        "outputs": {"result": "cycle.dates.from"},
        "timeout_sec": 10
      },
      {
        "name": "fetch_news",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "news_aggregator",
          "operation": "search_news",
          "query": "AI OR LLM OR GPT OR \"large language model\" OR \"artificial intelligence\"",
          "providers": ["nyt", "guardian"],
          "from_date": "${cycle.dates.from}",
          "to_date": "${cycle.dates.now}",
          "limit": 8
        },
        "outputs": {"articles": "cycle.sources.news"},
        "timeout_sec": 30,
        "retry": {"max": 2, "delay_sec": 5}
      },
      {
        "name": "fetch_reddit",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "reddit_intelligence",
          "operation": "multi_search",
          "subreddits": ["MachineLearning", "LocalLLaMA", "OpenAI"],
          "query": "AI OR LLM OR GPT",
          "limit_per_sub": 3,
          "time_filter": "week"
        },
        "outputs": {"results": "cycle.sources.reddit"},
        "timeout_sec": 30,
        "retry": {"max": 2, "delay_sec": 5}
      },
      {
        "name": "fetch_arxiv",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "academic_research_super",
          "operation": "search_papers",
          "query": "LLM OR GPT OR transformer OR \"large language model\"",
          "sources": ["arxiv"],
          "max_results": 8,
          "include_abstracts": true,
          "max_abstract_chars": 500
        },
        "outputs": {"results": "cycle.sources.arxiv"},
        "timeout_sec": 30,
        "retry": {"max": 2, "delay_sec": 5}
      },
      {
        "name": "fetch_papers_with_code",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "universal_doc_scraper",
          "operation": "extract_page",
          "url": "https://paperswithcode.com/latest"
        },
        "outputs": {"content": "cycle.sources.pwc_raw"},
        "timeout_sec": 30,
        "retry": {"max": 2, "delay_sec": 5}
      },
      {
        "name": "fetch_sonar",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "call_llm",
          "operation": "call",
          "model": "${worker.sonar_model}",
          "timeout": 120,
          "messages": {"$import": "prompts/sonar_fetch.json"},
          "temperature": 0.3,
          "max_tokens": 2000
        },
        "outputs": {"content": "cycle.sources.sonar_raw"},
        "timeout_sec": 120,
        "retry": {"max": 2, "delay_sec": 10}
      },
      {
        "name": "normalize_sonar_source",
        "type": "transform",
        "handler": "normalize_llm_output",
        "inputs": {"content": "${cycle.sources.sonar_raw}", "expected_format": "json", "fallback_value": []},
        "outputs": {"parsed": "cycle.sources.sonar"}
      },
      {"name": "SCORING_LOOP", "type": "transform", "handler": "set_value", "inputs": {"value": "scoring"}, "outputs": {"result": "cycle.meta.phase"}},
      {
        "name": "get_scoring_timestamp",
        "type": "io",
        "handler": "http_tool",
        "inputs": {"tool": "date", "operation": "now", "tz": "UTC"},
        "outputs": {"result": "cycle.meta.scoring_started_at"},
        "timeout_sec": 5
      },
      {
        "name": "llm_gpt_score",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "call_llm",
          "operation": "call",
          "model": "${worker.llm_model}",
          "timeout": 180,
          "messages": {"$import": "prompts/gpt_scoring.json"},
          "temperature": 0.3,
          "max_tokens": 2500
        },
        "outputs": {"content": "cycle.scoring.gpt_raw"},
        "timeout_sec": 180,
        "retry": {"max": 2, "delay_sec": 10}
      },
      {
        "name": "normalize_gpt_score",
        "type": "transform",
        "handler": "normalize_llm_output",
        "inputs": {"content": "${cycle.scoring.gpt_raw}", "expected_format": "json", "fallback_value": []},
        "outputs": {"parsed": "cycle.scoring.top10", "success": "cycle.scoring.gpt_ok"}
      },
      {"name": "check_parse", "type": "decision", "decision": {"kind": "truthy", "input": "${cycle.scoring.gpt_ok}"}},
      {
        "name": "get_validation_timestamp",
        "type": "io",
        "handler": "http_tool",
        "inputs": {"tool": "date", "operation": "now", "tz": "UTC"},
        "outputs": {"result": "cycle.meta.validation_started_at"},
        "timeout_sec": 5
      },
      {
        "name": "llm_sonar_validate",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "call_llm",
          "operation": "call",
          "model": "${worker.sonar_model}",
          "timeout": 90,
          "messages": {"$import": "prompts/sonar_validation.json"},
          "temperature": 0.2,
          "max_tokens": 800
        },
        "outputs": {"content": "cycle.validation.sonar_raw"},
        "timeout_sec": 90,
        "retry": {"max": 2, "delay_sec": 10}
      },
      {
        "name": "normalize_validation",
        "type": "transform",
        "handler": "normalize_llm_output",
        "inputs": {"content": "${cycle.validation.sonar_raw}", "expected_format": "json", "fallback_value": {"score": 0, "feedback": "Parse failed"}},
        "outputs": {"parsed": "cycle.validation.sonar_result"}
      },
      {
        "name": "extract_validation_fields",
        "type": "transform",
        "handler": "extract_field",
        "inputs": {
          "data": "${cycle.validation.sonar_result}",
          "paths": {"score": "score", "feedback": "feedback"}
        },
        "outputs": {
          "score": "cycle.validation.sonar_score",
          "feedback": "cycle.validation.sonar_feedback"
        }
      },
      {
        "name": "get_validation_end_timestamp",
        "type": "io",
        "handler": "http_tool",
        "inputs": {"tool": "date", "operation": "now", "tz": "UTC"},
        "outputs": {"result": "cycle.meta.validation_ended_at"},
        "timeout_sec": 5
      },
      {
        "name": "stringify_top10_for_log",
        "type": "transform",
        "handler": "json_stringify",
        "inputs": {"value": "${cycle.scoring.top10}"},
        "outputs": {"json_string": "cycle.scoring.top10_json_str"}
      },
      {
        "name": "log_validation_to_db",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "sqlite_db",
          "operation": "execute",
          "db": "${worker.db_name}",
          "query": "CREATE TABLE IF NOT EXISTS validation_logs (id INTEGER PRIMARY KEY AUTOINCREMENT, timestamp TEXT NOT NULL, attempt INTEGER, score REAL, feedback TEXT, top10_json TEXT)",
          "params": []
        },
        "outputs": {"success": "cycle.meta.log_table_ready"},
        "timeout_sec": 10
      },
      {
        "name": "insert_validation_log",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "sqlite_db",
          "operation": "execute",
          "db": "${worker.db_name}",
          "query": "INSERT INTO validation_logs (timestamp, attempt, score, feedback, top10_json) VALUES (?, ?, ?, ?, ?)",
          "params": ["${cycle.meta.validation_ended_at}", "${cycle.meta.retry_count}", "${cycle.validation.sonar_score}", "${cycle.validation.sonar_feedback}", "${cycle.scoring.top10_json_str}"]
        },
        "outputs": {"success": "cycle.meta.log_inserted"},
        "timeout_sec": 10
      },
      {
        "name": "log_sonar_validation",
        "type": "transform",
        "handler": "format_template",
        "inputs": {
          "template": "VALIDATION SONAR [{timestamp}] (Tentative {attempt}): Score {score}/10\n{feedback}",
          "timestamp": "${cycle.meta.validation_ended_at}",
          "attempt": "${cycle.meta.retry_count}",
          "score": "${cycle.validation.sonar_score}",
          "feedback": "${cycle.validation.sonar_feedback}"
        },
        "outputs": {"text": "cycle.validation.log_message"}
      },
      {"name": "check_quality", "type": "decision", "decision": {"kind": "compare", "input": "${cycle.validation.sonar_score}", "operator": ">=", "value": 7}},
      {"name": "check_retry", "type": "decision", "decision": {"kind": "compare", "input": "${cycle.meta.retry_count}", "operator": "<", "value": 3}},
      {
        "name": "increment",
        "type": "transform",
        "handler": "increment",
        "inputs": {"value": "${cycle.meta.retry_count}"},
        "outputs": {"result": "cycle.meta.retry_count"}
      },
      {
        "name": "llm_format",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "call_llm",
          "operation": "call",
          "model": "${worker.llm_model}",
          "timeout": 120,
          "messages": {"$import": "prompts/gpt_format_fr.json"},
          "temperature": 0.1,
          "max_tokens": 4000
        },
        "outputs": {"content": "cycle.result.report"},
        "timeout_sec": 120,
        "retry": {"max": 2, "delay_sec": 10}
      },
      {
        "name": "get_final_timestamp",
        "type": "io",
        "handler": "http_tool",
        "inputs": {"tool": "date", "operation": "now", "tz": "UTC"},
        "outputs": {"result": "cycle.result.completed_at"},
        "timeout_sec": 5
      },
      {
        "name": "stringify_top10_for_report",
        "type": "transform",
        "handler": "json_stringify",
        "inputs": {"value": "${cycle.scoring.top10}"},
        "outputs": {"json_string": "cycle.scoring.top10_json_str_final"}
      },
      {
        "name": "create_reports_table",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "sqlite_db",
          "operation": "execute",
          "db": "${worker.db_name}",
          "query": "CREATE TABLE IF NOT EXISTS reports (id INTEGER PRIMARY KEY AUTOINCREMENT, created_at TEXT NOT NULL DEFAULT CURRENT_TIMESTAMP, date_from TEXT, date_to TEXT, report_markdown TEXT, avg_score REAL, retry_count INTEGER, top10_json TEXT, completed_at TEXT)",
          "params": []
        },
        "outputs": {"success": "cycle.result.table_created"},
        "timeout_sec": 10
      },
      {
        "name": "save_report",
        "type": "io",
        "handler": "http_tool",
        "inputs": {
          "tool": "sqlite_db",
          "operation": "execute",
          "db": "${worker.db_name}",
          "query": "INSERT INTO reports (date_from, date_to, report_markdown, avg_score, retry_count, top10_json, completed_at) VALUES (?, ?, ?, ?, ?, ?, ?)",
          "params": ["${cycle.dates.from}", "${cycle.dates.now}", "${cycle.result.report}", "${cycle.validation.sonar_score}", "${cycle.meta.retry_count}", "${cycle.scoring.top10_json_str_final}", "${cycle.result.completed_at}"]
        },
        "outputs": {"success": "cycle.result.saved"},
        "timeout_sec": 15
      },
      {"name": "mark_success", "type": "transform", "handler": "set_value", "inputs": {"value": "Success"}, "outputs": {"result": "cycle.result.status"}},
      {"name": "mark_fail", "type": "transform", "handler": "set_value", "inputs": {"value": "Parse failed"}, "outputs": {"result": "cycle.result.status"}},
      {"name": "EXIT", "type": "exit"}
    ],
    "edges": [
      {"from": "START", "to": "get_date_now"},
      {"from": "get_date_now", "to": "get_date_from"},
      {"from": "get_date_from", "to": "fetch_news"},
      {"from": "fetch_news", "to": "fetch_reddit"},
      {"from": "fetch_reddit", "to": "fetch_arxiv"},
      {"from": "fetch_arxiv", "to": "fetch_papers_with_code"},
      {"from": "fetch_papers_with_code", "to": "fetch_sonar"},
      {"from": "fetch_sonar", "to": "normalize_sonar_source"},
      {"from": "normalize_sonar_source", "to": "SCORING_LOOP"},
      {"from": "SCORING_LOOP", "to": "get_scoring_timestamp"},
      {"from": "get_scoring_timestamp", "to": "llm_gpt_score"},
      {"from": "llm_gpt_score", "to": "normalize_gpt_score"},
      {"from": "normalize_gpt_score", "to": "check_parse"},
      {"from": "check_parse", "to": "get_validation_timestamp", "when": "true"},
      {"from": "check_parse", "to": "mark_fail", "when": "false"},
      {"from": "get_validation_timestamp", "to": "llm_sonar_validate"},
      {"from": "llm_sonar_validate", "to": "normalize_validation"},
      {"from": "normalize_validation", "to": "extract_validation_fields"},
      {"from": "extract_validation_fields", "to": "get_validation_end_timestamp"},
      {"from": "get_validation_end_timestamp", "to": "stringify_top10_for_log"},
      {"from": "stringify_top10_for_log", "to": "log_validation_to_db"},
      {"from": "log_validation_to_db", "to": "insert_validation_log"},
      {"from": "insert_validation_log", "to": "log_sonar_validation"},
      {"from": "log_sonar_validation", "to": "check_quality"},
      {"from": "check_quality", "to": "llm_format", "when": "true"},
      {"from": "check_quality", "to": "check_retry", "when": "false"},
      {"from": "check_retry", "to": "increment", "when": "true"},
      {"from": "check_retry", "to": "llm_format", "when": "false"},
      {"from": "increment", "to": "SCORING_LOOP"},
      {"from": "llm_format", "to": "get_final_timestamp"},
      {"from": "get_final_timestamp", "to": "stringify_top10_for_report"},
      {"from": "stringify_top10_for_report", "to": "create_reports_table"},
      {"from": "create_reports_table", "to": "save_report"},
      {"from": "save_report", "to": "mark_success"},
      {"from": "mark_success", "to": "EXIT"},
      {"from": "mark_fail", "to": "EXIT"}
    ],
    "scopes": {"$import": "config/scopes.json"}
  }
}
