{
  "version": "1.0",
  "process_version": "1.0.3-test-retry-scopes-value-fix",
  "metadata": {
    "description": "Test retry loop with scopes lifecycle (declarative initialization)",
    "author": "orchestrator-test-team",
    "test_features": [
      "Scopes: declarative seed at START",
      "Scopes: persistent variables (reset_on: [])",
      "Transform: increment (retry_count++)",
      "Decision: compare (score >= 7, retry_count < 3)",
      "Guard 100 nodes per cycle (safety)"
    ]
  },
  "worker_ctx": {
    "timezone": "UTC",
    "max_retries": 3,
    "score_threshold": 7
  },
  "graph": {
    "nodes": [
      {
        "name": "START",
        "type": "start"
      },
      {
        "name": "FETCH_LOOP_ENTRY",
        "type": "transform",
        "handler": "set_value",
        "inputs": {
          "value": "entering fetch loop"
        },
        "outputs": {
          "result": "cycle._meta.loop_marker"
        }
      },
      {
        "name": "mock_fetch_and_score",
        "type": "transform",
        "handler": "mock_score_progressive",
        "inputs": {
          "retry_count": "${cycle._meta.retry_count}",
          "base": 4.0,
          "increment": 1.5
        },
        "outputs": {
          "score": "cycle.validation.score",
          "message": "cycle.validation.message"
        }
      },
      {
        "name": "check_score_quality",
        "type": "decision",
        "decision": {
          "kind": "compare",
          "input": "${cycle.validation.score}",
          "operator": ">=",
          "value": 7
        }
      },
      {
        "name": "mark_success",
        "type": "transform",
        "handler": "set_value",
        "inputs": {
          "value": "Quality threshold met!"
        },
        "outputs": {
          "result": "cycle.result.status"
        }
      },
      {
        "name": "check_retry_limit",
        "type": "decision",
        "decision": {
          "kind": "compare",
          "input": "${cycle._meta.retry_count}",
          "operator": "<",
          "value": 3
        }
      },
      {
        "name": "increment_retry",
        "type": "transform",
        "handler": "increment",
        "inputs": {
          "value": "${cycle._meta.retry_count}"
        },
        "outputs": {
          "result": "cycle._meta.retry_count"
        }
      },
      {
        "name": "mark_failure",
        "type": "transform",
        "handler": "set_value",
        "inputs": {
          "value": "Max retries exceeded, quality not met"
        },
        "outputs": {
          "result": "cycle.result.status"
        }
      },
      {
        "name": "EXIT",
        "type": "exit"
      }
    ],
    "edges": [
      {"from": "START", "to": "FETCH_LOOP_ENTRY"},
      
      {"from": "FETCH_LOOP_ENTRY", "to": "mock_fetch_and_score"},
      {"from": "mock_fetch_and_score", "to": "check_score_quality"},
      
      {"from": "check_score_quality", "to": "mark_success", "when": "true"},
      {"from": "check_score_quality", "to": "check_retry_limit", "when": "false"},
      
      {"from": "check_retry_limit", "to": "increment_retry", "when": "true"},
      {"from": "check_retry_limit", "to": "mark_failure", "when": "false"},
      
      {"from": "increment_retry", "to": "FETCH_LOOP_ENTRY"},
      
      {"from": "mark_success", "to": "EXIT"},
      {"from": "mark_failure", "to": "EXIT"}
    ],
    "scopes": [
      {
        "name": "_meta",
        "reset_on": [],
        "seed": {
          "retry_count": 0,
          "max_retries": 3
        }
      },
      {
        "name": "validation",
        "reset_on": [],
        "seed": {}
      },
      {
        "name": "result",
        "reset_on": [],
        "seed": {}
      }
    ]
  },
  "graph_mermaid": "graph TD\n  START([START: Init scopes]) --> loop_entry[üîÑ FETCH LOOP ENTRY]\n  loop_entry --> fetch[Mock Fetch & Score]\n  fetch --> check_score{score >= 7?}\n  check_score -->|true ‚úÖ| success[Mark Success]\n  success --> EXIT_SUCCESS([EXIT])\n  check_score -->|false ‚ùå| check_retry{retry_count < 3?}\n  check_retry -->|true üîÅ| increment[retry_count++]\n  increment --> loop_entry\n  check_retry -->|false üõë| failure[Mark Failure]\n  failure --> EXIT_FAILURE([EXIT])\n  style START fill:#90EE90\n  style EXIT_SUCCESS fill:#90EE90\n  style EXIT_FAILURE fill:#FFB6C1\n  style loop_entry fill:#87CEEB\n  style increment fill:#FFD700\n  style check_score fill:#FFA500\n  style check_retry fill:#FFA500"
}
